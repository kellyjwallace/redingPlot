infl<-lm.influence(tree_model)
infl
infl$coefficients
infl$coefficients$Girth
infl$coefficients[,1]
plot(infl$coefficients[,1], infl$coefficients[,2])
plot(infl$coefficients[,1], infl$coefficients[,2],pch=16)
points(0,0,pch=16,col="red",cex=1.2)
plot(infl$coefficients[,1], infl$coefficients[,2],pch=16, xlab="change to intercept", ylab="change to slope")
points(0,0,pch=16,col="red",cex=1.2)
shapiro.test(tree_model$residuals)
plot(tree_model$residuals, predict(tree_model))
plot(tree_model$residuals, predict(tree_model),pch=16,xlab="residuals",ylab="fitted")
a = 10
b = 2
vals <- seq(runif())
?runif
vals <- seq(runif(40, min=0,max=100))
vals_y <- a + (b*(values^2))
vals_y <- a + (b*(vals^2))
plot(vals,vals_y)
c = a
c
a = 2
vals_y <- a^2 + (b*vals) + c
plot(vals,vals_y)
vals_y <- (a*(vals^2)) + (b*vals) + c
plot(vals,vals_y)
vals <- seq(runif(40, min=-50,max=50))
plot(vals,vals_y)
vals_y <- (a*(vals^2)) + (b*vals) + c
plot(vals,vals_y)
a=2; b=3
vals <- runif(40, min=-50,max=50)
vals_y <- (a*(vals^2)) + (b*vals) + c
plot(vals,vals_y,pch=16)
a_bad_model <- lm(vals_y~vals)
plot(a_bad_model$residuals, predict(a_bad_model),pch=16,xlab="residuals",ylab="fitted")
a=2; b=3
vals <- runif(40, min=-50,max=50)
vals_y <- (a*(vals^2)) + (b*vals) + c + runif(1,0,10)
plot(vals,vals_y,pch=16)
a=1; b=2
vals <- runif(40, min=-50,max=50)
vals_y <- (a*(vals^2)) + (b*vals) + c + runif(1,-50,50)
plot(vals,vals_y,pch=16)
vals_y <- (a*(vals^2)) + (b*vals) + c + runif(1,-200,200)
plot(vals,vals_y,pch=16)
vals_y <- (a*(vals^2)) + (b*vals) + c + runif(length(vals),-200,200)
plot(vals,vals_y,pch=16)
a=1; b=2
vals <- runif(40, min=-50,max=50)
vals_y <- (a*(vals^2)) + (b*vals) + c + runif(length(vals),-250,250)
plot(vals,vals_y,pch=16)
a_bad_model <- lm(vals_y~vals)
plot(a_bad_model$residuals, predict(a_bad_model),pch=16,xlab="residuals",ylab="fitted")
plot(vals,vals_y,pch=16,main="example of non-linear relationship")
plot(infl$coefficients[,1], infl$coefficients[,2],pch=16, xlab="change to intercept", ylab="change to slope")
points(0,0,pch=16,col="red",cex=1.2)
x <- trees$Height
hist(x)
plot(Height~Girth, data=trees)
plot(x,y,xlab="Girth with outlier", ylab="Height with outlier")
x <- c(trees$Girth,40)
y <- c(trees$Height,150)
plot(x,y,xlab="Girth with outlier", ylab="Height with outlier")
tree_model_outlier <- lm(y~x)
infl<-lm.influence(tree_model_outlier)
plot(infl$coefficients[,1], infl$coefficients[,2],pch=16, xlab="change to intercept", ylab="change to slope", main="influence plot with outlier")
a=1
b=2
vals <- runif(40, min=-50,max=50)
vals_y <- (a*(vals^2)) + (b*vals) + c + runif(length(vals),-250,250)
plot(vals,vals_y,pch=16,main="example of non-linear relationship")
vals <- runif(40, min=-50,max=50)
vals_y <- vals^2) + vals + c + runif(length(vals),-250,250)
vals_y <- vals^2 + vals + c + runif(length(vals),-250,250)
plot(vals,vals_y,pch=16,main="example of non-linear relationship")
a_bad_model <- lm(vals_y~vals)
plot(a_bad_model$residuals, predict(a_bad_model),pch=16,xlab="residuals",ylab="fitted",main="reidual plot shows pattern")
?t.test
str(sleep)
head(sleep)
?sleep
?data
?datasets
library(help = "datasets")
head(OrchardSprays)
?Loblolly
head(ChickWeight)
head(crimtab)
head(women)
nrow(women)
head(UCBAdmissions)
?UCBAdmissions
?ToothGrowth
head(ToothGrowth)
?t.test
?t.test
t.test(ToothGrowth$len[ToothGrowth$sup=="OJ"], ToothGrowth$len[ToothGrowth$sup=="VC"])
t.test(len~sup, data = ToothGrowth)
t.test(len~supp, data = ToothGrowth) # or t.test(ToothGrowth$len[ToothGrowth$sup=="OJ"], ToothGrowth$len[ToothGrowth$sup=="VC"])
t.test(len~supp, data = ToothGrowth) # or t.test(ToothGrowth$len[ToothGrowth$sup=="OJ"], ToothGrowth$len[ToothGrowth$sup=="VC"]) %>% str
library(magrittr)
t.test(len~supp, data = ToothGrowth) # or t.test(ToothGrowth$len[ToothGrowth$sup=="OJ"], ToothGrowth$len[ToothGrowth$sup=="VC"]) %>% str
str(t.test(len~supp, data = ToothGrowth) # or t.test(ToothGrowth$len[ToothGrowth$sup=="OJ"], ToothGrowth$len[ToothGrowth$sup=="VC"]))
)
library(redingPlot)
cats_meow(ToothGrowth$len, ToothGrowth$supp)
cats_meow(ToothGrowth$len, ToothGrowth$supp, ylab= "tooth length")
shapiro.test(ToothGrowth$len[ToothGrowth$sup=="OJ"])
shapiro.test(ToothGrowth$len[ToothGrowth$sup=="VC"])
?t.test
wilcox.test(ToothGrowth$len[ToothGrowth$sup=="OJ"], ToothGrowth$len[ToothGrowth$sup=="VC"])
library(help = "datasets")
head(DNase)
head(BJsales)
?BJsales
mtcars
?sleep
sleep
t.test(sleep$extra)
t.test(sleep$extra, mu=0)
shaprio.test(sleep$extra)
shapiro.test(sleep$extra)
?t.ts
?t.test
shapiro.test(sleep$extra)
boxplot(sleep$extra)
abline(a=0,b=0,lwd=2,lty=2)
t.test(sleep$extra, mu=0)
paired
?paired
y <- list(rnorm(50), rnorm(50))
labels <- c()
sizes <- sapply(y,length)
for(i in 1:length(y)){
labels <- c(labels,rep(lab[i], sizes[i]))
}
lab <- letters[1:length(y)]
for(i in 1:length(y)){
labels <- c(labels,rep(lab[i], sizes[i]))
}
df <- data.frame(matrix(unlist(y), nrow=length(unlist(y)), byrow=T),labels)
names(df)<-c("dat","groups")
y <- df$dat
x <- df$groups
x
levels()
levels(x)
str(x)
x <- rnorm(40)
y <- rnorm(40)
boxplot(list(x,y))
?lines
stats <- boxplot(list(x,y))
str(stats)
paired <- function(y, x, lab=NA, SEM=FALSE, CI=FALSE, box_thickness = 0.2, plot_points=T, colors = viridis(5)[1:4], line_color = "grey50", ...){
# if the data are entered as a list, coerse to a dataframe
if(missing(x) | missing(y)){
stop("you must supply two vectors to plot")
}
if(length(x) != length(y)){
stop("the number of observations in the two vectors are unequal. these cannot be paired data")
}
# plot boxes
(stats<-boxplot(list(x,y), boxwex = box_thickness, bty='l', cex.axis=1.2,cex.lab=1.3,pars = list(medlty = 2, medlwd=1, boxlty=2, whisklty = c(2, 2), medcex = 1, outcex = 0, staplelty = "blank"), ...))
# run t-test to get CIs and means later
tests <- by(y,x,t.test)
CIs_lower <- c()
CIs_upper <- c()
means <- c()
# get CIs and means
for(i in 1:length(tests)){
means <- c(means, tests[[i]]$estimate)
CIs_lower <- c(CIs_lower, tests[[i]]$conf.int[1])
CIs_upper <- c(CIs_upper, tests[[i]]$conf.int[2])
}
sems <- by(y,x,sd) %>% divide_by(sqrt(by(y,x,length))) %>% as.vector
# plot sems
if(SEM == TRUE){
for(i in 1:(stats$n %>% length)){
lines(x=c(i,i), y=c(means[i], means[i]+sems[i]), lwd=1.4, col="black")
lines(x=c(i,i), y=c(means[i], means[i]-sems[i]), lwd=1.4, col="black")
}
}
# plot CIs
if(CI == TRUE){
for(i in 1:(stats$n %>% length)){
lines(x=c(i,i), y=c(means[i], CIs_lower[i]), lwd=1.4, col="black")
lines(x=c(i,i), y=c(means[i], CIs_upper[i]), lwd=1.4, col="black")
}
}
# plot the data
if(plot_points==TRUE){
for(i in 1:(stats$n %>% length)){
points(x=rep(i, stats$n[i]) %>% jitter(amount = 0.07) + 0.25, y=by(y,x,c)[[i]], pch=16, col=colors[i], cex=1.1)
}
}
# plot the lines connecting paired data points
for(i in 1:length(x)){
lines(x = c(1.2,1.8), y=c(x[i], y[i]), col=line_color)
}
# plot the means
points(1:(stats$n %>% length),means,pch=16,cex=1.3,col="black")
}
paired(x,y)
paired <- function(y, x, lab=NA, box_thickness = 0.2, plot_points=T, colors = viridis(5)[1:4], line_color = "grey50", ...){
# if the data are entered as a list, coerse to a dataframe
if(missing(x) | missing(y)){
stop("you must supply two vectors to plot")
}
if(length(x) != length(y)){
stop("the number of observations in the two vectors are unequal. these cannot be paired data")
}
# plot boxes
(stats<-boxplot(list(x,y), boxwex = box_thickness, bty='l', cex.axis=1.2,cex.lab=1.3,pars = list(medlty = 2, medlwd=1, boxlty=2, whisklty = c(2, 2), medcex = 1, outcex = 0, staplelty = "blank"), ...))
# plot the data
if(plot_points==TRUE){
for(i in 1:(stats$n %>% length)){
points(x=rep(i, stats$n[i]) %>% jitter(amount = 0.07) + 0.25, y=by(y,x,c)[[i]], pch=16, col=colors[i], cex=1.1)
}
}
# plot the lines connecting paired data points
for(i in 1:length(x)){
lines(x = c(1.2,1.8), y=c(x[i], y[i]), col=line_color)
}
# plot the means
points(1:(stats$n %>% length),means,pch=16,cex=1.3,col="black")
}
paired(x,y)
library(magrittr)
paired(x,y)
length(x)
length(y)
paired <- function(y, x, lab=NA, box_thickness = 0.2, plot_points=T, colors = viridis(5)[1:4], line_color = "grey50", ...){
# if the data are entered as a list, coerse to a dataframe
if(missing(x) | missing(y)){
stop("you must supply two vectors to plot")
}
if(length(x) != length(y)){
stop("the number of observations in the two vectors are unequal. these cannot be paired data")
}
# plot boxes
(stats<-boxplot(list(x,y), boxwex = box_thickness, bty='l', cex.axis=1.2,cex.lab=1.3,pars = list(medlty = 1, medlwd=1, boxlty=1, whisklty = c(2, 2), medcex = 1, outcex = 0, staplelty = "blank"), ...))
print("here1")
# plot the data
if(plot_points==TRUE){
for(i in 1:length(x)){
points(x=1.2, x, col=colors[1])
points(1.8, y, col = colors[2])
}
}
print("here2")
# plot the lines connecting paired data points
for(i in 1:length(x)){
lines(x = c(1.2,1.8), y=c(x[i], y[i]), col=line_color)
}
plot("here3")
# plot the means
points(1:(stats$n %>% length),means,pch=16,cex=1.3,col="black")
}
length(y)
paired(x,y)
?ppoints
?points
x
paired <- function(y, x, lab=NA, box_thickness = 0.2, plot_points=T, colors = viridis(5)[1:4], line_color = "grey50", ...){
# if the data are entered as a list, coerse to a dataframe
if(missing(x) | missing(y)){
stop("you must supply two vectors to plot")
}
if(length(x) != length(y)){
stop("the number of observations in the two vectors are unequal. these cannot be paired data")
}
# plot boxes
(stats<-boxplot(list(x,y), boxwex = box_thickness, bty='l', cex.axis=1.2,cex.lab=1.3,pars = list(medlty = 1, medlwd=1, boxlty=1, whisklty = c(2, 2), medcex = 1, outcex = 0, staplelty = "blank"), ...))
print("here1")
# plot the data
if(plot_points==TRUE){
for(i in 1:length(x)){
points(rep(1.2, length(x)), x, col=colors[1])
points(rep(1.8, length(x)), y, col = colors[2])
}
}
print("here2")
# plot the lines connecting paired data points
for(i in 1:length(x)){
lines(x = c(1.2,1.8), y=c(x[i], y[i]), col=line_color)
}
plot("here3")
# plot the means
points(1:(stats$n %>% length),means,pch=16,cex=1.3,col="black")
}
paired(x,y)
library(redingPlot)
paired(x,y)
paired <- function(y, x, lab=NA, box_thickness = 0.2, plot_points=T, colors = viridis(5)[1:4], line_color = "grey50", ...){
# if the data are entered as a list, coerse to a dataframe
if(missing(x) | missing(y)){
stop("you must supply two vectors to plot")
}
if(length(x) != length(y)){
stop("the number of observations in the two vectors are unequal. these cannot be paired data")
}
# plot boxes
(stats<-boxplot(list(x,y), boxwex = box_thickness, bty='l', cex.axis=1.2,cex.lab=1.3,pars = list(medlty = 1, medlwd=1, boxlty=1, whisklty = c(2, 2), medcex = 1, outcex = 0, staplelty = "blank"), ...))
print("here1")
# plot the data
if(plot_points==TRUE){
for(i in 1:length(x)){
points(rep(1.2, length(x)), x, col=colors[1])
points(rep(1.8, length(x)), y, col = colors[2])
}
}
}
paired(x,y)
for(i in 1:length(x)){
lines(x = c(1.2,1.8), y=c(x[i], y[i]), col=line_color)
}
line_color = "grey50"
for(i in 1:length(x)){
lines(x = c(1.2,1.8), y=c(x[i], y[i]), col=line_color)
}
paired <- function(y, x, lab=NA, box_thickness = 0.2, plot_points=T, colors = viridis(5)[1:4], line_color = "grey50", ...){
# if the data are entered as a list, coerse to a dataframe
if(missing(x) | missing(y)){
stop("you must supply two vectors to plot")
}
if(length(x) != length(y)){
stop("the number of observations in the two vectors are unequal. these cannot be paired data")
}
# plot boxes
(stats<-boxplot(list(x,y), boxwex = box_thickness, bty='l', cex.axis=1.2,cex.lab=1.3,pars = list(medlty = 1, medlwd=1, boxlty=1, whisklty = c(2, 2), medcex = 1, outcex = 0, staplelty = "blank"), ...))
print("here1")
# plot the data
if(plot_points==TRUE){
for(i in 1:length(x)){
points(rep(1.2, length(x)), x, col=colors[1], pch=16)
points(rep(1.8, length(x)), y, col = colors[2], pch=16)
}
}
print("here2")
# plot the lines connecting paired data points
for(i in 1:length(x)){
lines(x = c(1.2,1.8), y=c(x[i], y[i]), col=line_color)
}
}
paired(nrorm(10,5), rnorm(10,7))
paired(tnorm(10,5), rnorm(10,7))
paired(rnorm(10,5), rnorm(10,7))
paired(rnorm(10,5), rnorm(10,7), plot_points=F)
paired(rnorm(10,5), rnorm(10,7), plot_points=F, lab=c("mirror", "fish"))
?boxplot
paired <- function(y, x, lab=NA, box_thickness = 0.2, plot_points=T, colors = viridis(5)[1:4], line_color = "grey50", ...){
# if the data are entered as a list, coerse to a dataframe
if(missing(x) | missing(y)){
stop("you must supply two vectors to plot")
}
if(length(x) != length(y)){
stop("the number of observations in the two vectors are unequal. these cannot be paired data")
}
# plot boxes
(stats<-boxplot(list(x,y), boxwex = box_thickness, bty='l', names=lab, cex.axis=1.2,cex.lab=1.3,pars = list(medlty = 1, medlwd=1, boxlty=1, whisklty = c(2, 2), medcex = 1, outcex = 0, staplelty = "blank"), ...))
print("here1")
# plot the data
if(plot_points==TRUE){
for(i in 1:length(x)){
points(rep(1.2, length(x)), x, col=colors[1], pch=16)
points(rep(1.8, length(x)), y, col = colors[2], pch=16)
}
}
print("here2")
# plot the lines connecting paired data points
for(i in 1:length(x)){
lines(x = c(1.2,1.8), y=c(x[i], y[i]), col=line_color)
}
}
paired(rnorm(10,5), rnorm(10,7), plot_points=F, lab=c("mirror", "fish"))
paired(rnorm(10,5), rnorm(10,7), plot_points=F, lab=c("mirror", "fish"), plot_points)
paired(rnorm(10,5), rnorm(10,7), plot_points=F, lab=c("mirror", "fish"), plot_points=T)
paired(rnorm(10,5), rnorm(10,7), lab=c("mirror", "fish"), plot_points=T)
paired <- function(y, x, lab=NA, box_thickness = 0.2, plot_points=T, colors = viridis(5)[1:4], line_color = "grey20", ...){
# if the data are entered as a list, coerse to a dataframe
if(missing(x) | missing(y)){
stop("you must supply two vectors to plot")
}
if(length(x) != length(y)){
stop("the number of observations in the two vectors are unequal. these cannot be paired data")
}
# plot boxes
(stats<-boxplot(list(x,y), boxwex = box_thickness, bty='l', names=lab, cex.axis=1.2,cex.lab=1.3,pars = list(medlty = 1, medlwd=1, boxlty=1, whisklty = c(2, 2), medcex = 1, outcex = 0, staplelty = "blank"), ...))
print("here1")
# plot the data
if(plot_points==TRUE){
for(i in 1:length(x)){
points(rep(1.2, length(x)), x, col=colors[1], pch=16)
points(rep(1.8, length(x)), y, col = colors[2], pch=16)
}
}
print("here2")
# plot the lines connecting paired data points
for(i in 1:length(x)){
lines(x = c(1.2,1.8), y=c(x[i], y[i]), col=line_color)
}
}
library(devtools)
install_github("reding/redingPlot")
install_github("reding/redingPlot")
install_github("lukereding/redingPlot")
library(redingPlot)
?paired
library(roxygen2)
setwd("~/Documents/redingPlot/")
setwd("./examples/")
png("./paired.png", height = 500*.8, width = 600*.8)
paired <- function(x, y, lab=NA, box_thickness = 0.2, plot_points=T, colors = c("#440154FF", "#21908CFF"), line_color = "grey20", ...){
# if the data are entered as a list, coerse to a dataframe
if(missing(x) | missing(y)){
stop("you must supply two vectors to plot")
}
if(length(x) != length(y)){
stop("the number of observations in the two vectors are unequal. these cannot be paired data")
}
# plot boxes
(stats<-boxplot(list(x,y), boxwex = box_thickness, bty='l', names=lab, cex.axis=1.2,cex.lab=1.3, ..., pars = list(medlty = 1, medlwd=1, boxlty=1, whisklty = c(1, 1), medcex = 1, outcex = 0, staplelty = "blank")))
# plot the data
if(plot_points==TRUE){
for(i in 1:length(x)){
points(rep(1.2, length(x)), x, col=colors[1], pch=16)
points(rep(1.8, length(x)), y, col = colors[2], pch=16)
}
}
# plot the lines connecting paired data points
for(i in 1:length(x)){
lines(x = c(1.22,1.78), y=c(x[i], y[i]), col=line_color)
}
}
paired(rnorm(10,5), rnorm(10,7), lab = c("X", "X_paired"), ylab = "measurement", main="paired() example")
dev.off()
paired <- function(x, y, lab=NA, box_thickness = 0.2, plot_points=T, colors = c("#440154FF", "#21908CFF"), line_color = "#0000050", ...){
# if the data are entered as a list, coerse to a dataframe
if(missing(x) | missing(y)){
stop("you must supply two vectors to plot")
}
if(length(x) != length(y)){
stop("the number of observations in the two vectors are unequal. these cannot be paired data")
}
# plot boxes
(stats<-boxplot(list(x,y), boxwex = box_thickness, bty='l', names=lab, cex.axis=1.2,cex.lab=1.3, ..., pars = list(medlty = 1, medlwd=1, boxlty=1, whisklty = c(1, 1), medcex = 1, outcex = 0, staplelty = "blank")))
# plot the data
if(plot_points==TRUE){
for(i in 1:length(x)){
points(rep(1.2, length(x)), x, col=colors[1], pch=16)
points(rep(1.8, length(x)), y, col = colors[2], pch=16)
}
}
# plot the lines connecting paired data points
for(i in 1:length(x)){
lines(x = c(1.22,1.78), y=c(x[i], y[i]), col=line_color)
}
}
png("./paired.png", height = 500*.8, width = 600*.8)
paired(rnorm(10,5), rnorm(10,7), lab = c("X", "X_paired"), ylab = "measurement", main="paired() example")
paired <- function(x, y, lab=NA, box_thickness = 0.2, plot_points=T, colors = c("#440154FF", "#21908CFF"), line_color = "#00000050", ...){
# if the data are entered as a list, coerse to a dataframe
if(missing(x) | missing(y)){
stop("you must supply two vectors to plot")
}
if(length(x) != length(y)){
stop("the number of observations in the two vectors are unequal. these cannot be paired data")
}
# plot boxes
(stats<-boxplot(list(x,y), boxwex = box_thickness, bty='l', names=lab, cex.axis=1.2,cex.lab=1.3, ..., pars = list(medlty = 1, medlwd=1, boxlty=1, whisklty = c(1, 1), medcex = 1, outcex = 0, staplelty = "blank")))
# plot the data
if(plot_points==TRUE){
for(i in 1:length(x)){
points(rep(1.2, length(x)), x, col=colors[1], pch=16)
points(rep(1.8, length(x)), y, col = colors[2], pch=16)
}
}
# plot the lines connecting paired data points
for(i in 1:length(x)){
lines(x = c(1.22,1.78), y=c(x[i], y[i]), col=line_color)
}
}
paired(rnorm(10,5), rnorm(10,7), lab = c("X", "X_paired"), ylab = "measurement", main="paired() example")
paired(rnorm(10,5), rnorm(10,7), lab = c("X", "X_paired"), ylab = "measurement", main="paired() example")
paired(rnorm(10,5), rnorm(10,7), lab = c("X", "X_paired"), ylab = "measurement", main="paired() example")
paired <- function(x, y, lab=NA, box_thickness = 0.2, plot_points=T, colors = c("#440154FF", "#21908CFF"), line_color = "#00000050", ...){
# if the data are entered as a list, coerse to a dataframe
if(missing(x) | missing(y)){
stop("you must supply two vectors to plot")
}
if(length(x) != length(y)){
stop("the number of observations in the two vectors are unequal. these cannot be paired data")
}
# plot boxes
(stats<-boxplot(list(x,y), boxwex = box_thickness, bty='l', names=lab, cex.axis=1.2,cex.lab=1.3, ..., pars = list(medlty = 1, medlwd=1, boxlty=1, whisklty = c(1, 1), medcex = 1, outcex = 0, staplelty = "blank")))
# plot the data
if(plot_points==TRUE){
for(i in 1:length(x)){
points(rep(1.2, length(x)), x, col=colors[1], pch=16)
points(rep(1.8, length(x)), y, col = colors[2], pch=16)
}
}
# plot the lines connecting paired data points
for(i in 1:length(x)){
lines(x = c(1.22,1.78), y=c(x[i], y[i]), col=line_color)
}
}
paired(rnorm(10,5), rnorm(10,7))
