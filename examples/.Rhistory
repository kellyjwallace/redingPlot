}
}
x$colon %<>% factor
summary(x$colon)
#get residuals when control for year
x$citations_logged <- log(x$citations) + 1
x <- x[is.finite(x$citations_logged),]
model <- lm(citations_logged~year,data=x)
x$year_residuals <- model$residuals
plot(x$citations_logged, x$kincaid)
library(MASS)
quantile(x$year_residuals,c(0.5),na.rm=T)
x_ <- x %>% mutate(cited = ifelse(year_residuals < 0.04488432, "least", ifelse(year_residuals >= 0.04488432, "most",NA)))
x_$cited %<>% factor
summary(x_$cited)
x_ %<>% .[complete.cases(x_),]
# should be 0.1*nrow(x) rows left
0.1*nrow(x)
nrow(x_)
scatter(x$year,x$year_residuals)
scatter(x$year,x$citations_logged)
scatter(x$year,x$citations)
scatter(x$year,x$citations_logged)
reduced <- x_[,-c(1,2,3,4,5,6,7,20:26,34,35,36,37,38)]
model <- lda(reduced[, -c(19,20)], factor(reduced$cited))
head(model$scaling)
transform <- predict(model)
head(transform$x)
reduced[,ncol(reduced)+1] <- transform$x
names(reduced)[ncol(reduced)] <- "LD"
# visualize
boxplot(LD~cited,data=reduced, horizontal =T) # not super
# now use cross validation
model_CV <- lda(reduced[, -c(19,20)], factor(reduced$cited), CV = T)
(classification_matrix <- table(reduced$cited, model_CV$class))
diag(prop.table(classification_matrix, 1))
sum(diag(prop.table(classification_matrix))) # not great
library(corrplot)
correlation_matrix <- cor(x[,-c(1,2,3,4,6,7,20:26,34,35,37)])
corrplot(correlation_matrix, is.corr=T,method="ellipse", hclust.method ="centroid", type="lower",col=magma(100))
boxplot(LD~cited,data=reduced, horizontal =T) # not super
source("~/Documents/graphics/plotting_functions.R")
words <- read.csv("~/Documents/citations/word_metrics.csv",stringsAsFactors = F)
str(words)
words$kincaid %<>% as.numeric
words$average_syl_per_word %<>% as.numeric
words$avg_words_per_sentence %<>% as.numeric
words$reading_ease %<>% as.numeric
words$setences_per_paragraph %<>% as.numeric
words$characters_per_word %<>% as.numeric
words$total_words %<>% as.numeric
head(words)
nrow(words)
words <- words[complete.cases(words),]
nrow(words)
# read in citations
citations <- read.csv("~/Documents/citations/citations.csv",stringsAsFactors = F)
# merge the two based on doi
words$doi <- gsub("^ ", "", words$doi)
x <- merge(citations, words, by = "doi")
x$title <- gsub("^ ", "", x$title)
x <- x[complete.cases[x],]
nrow(x) # 38,000
with(x, plot(kincaid, total_words, pch=16, col = magma(10)[log(citations)]))
#### do a pca
fit <- prcomp(x[,-c(1,2,3,4,5,6,7)], center = T, scale = T)
summary(fit)
str(fit)
x$loadings <- fit$x[,1]
x$loadings2 <- fit$x[,2]
## compare with books / literate that people know, e.g. this article or Hemingway or something from project Gutenburg
# scale citations
x$citations_logged <- log(x$citations)*10
with(x, plot(loadings, loadings2, pch= 16, col = viridis(70)[citations_logged] %>% addAlpha(0.99)))
with(x, plot(loadings,citations,log="y", pch=16, col="#00000060"))
with(x, plot(kincaid,citations,log="y", pch=16, col="#00000060"))
with(x, plot(total_words,citations,log="y", pch=16, col="#00000060"))
with(x, plot(complex_words_title,citations,log="y", pch=16, col="#00000060")) # possibly interesting; try logistic regression, binary 0 or 1+
x$colon <- rep(NA,nrow(x))
for(i in 1:nrow(x)){
if(length(grep(":",x$title[i])) == 1){
x$colon[i] <- "yes"
}
else{
x$colon[i] <- "no"
}
}
x$colon %<>% factor
summary(x$colon)
op <- par(no.readonly = TRUE)
library(corrplot)
correlation_matrix <- cor(x[,-c(1,2,3,4,6,7,20:26,34,35,37)])
corrplot(correlation_matrix, is.corr=T,method="ellipse", hclust.method ="centroid", type="lower",col=magma(100))
with(x, plot(loadings, loadings2, pch= 16, col = viridis(70)[citations_logged] %>% addAlpha(0.99)))
with(x, plot(loadings,citations,log="y", pch=16, col="#00000060"))
with(x, plot(kincaid,citations,log="y", pch=16, col="#00000060"))
with(x, plot(total_words,citations,log="y", pch=16, col="#00000060"))
with(x, plot(complex_words_title,citations,log="y", pch=16, col="#00000060")) # possibly interesting; try logistic regression, binary 0 or 1+
source("~/Documents/graphics/plotting_functions.R")
words <- read.csv("~/Documents/citations/word_metrics.csv",stringsAsFactors = F)
str(words)
words$kincaid %<>% as.numeric
words$average_syl_per_word %<>% as.numeric
words$avg_words_per_sentence %<>% as.numeric
words$reading_ease %<>% as.numeric
words$setences_per_paragraph %<>% as.numeric
words$characters_per_word %<>% as.numeric
words$total_words %<>% as.numeric
head(words)
nrow(words)
words <- words[complete.cases(words),]
nrow(words)
# read in citations
citations <- read.csv("~/Documents/citations/citations.csv",stringsAsFactors = F)
# merge the two based on doi
words$doi <- gsub("^ ", "", words$doi)
x <- merge(citations, words, by = "doi")
x$title <- gsub("^ ", "", x$title)
x <- x[complete.cases[x],]
nrow(x) # 38,000
with(x, plot(kincaid, total_words, pch=16, col = magma(10)[log(citations)]))
#### do a pca
fit <- prcomp(x[,-c(1,2,3,4,5,6,7)], center = T, scale = T)
summary(fit)
str(fit)
x$loadings <- fit$x[,1]
x$loadings2 <- fit$x[,2]
## compare with books / literate that people know, e.g. this article or Hemingway or something from project Gutenburg
# scale citations
x$citations_logged <- log(x$citations)*10
with(x, plot(loadings, loadings2, pch= 16, col = viridis(70)[citations_logged] %>% addAlpha(0.99)))
with(x, plot(loadings,citations,log="y", pch=16, col="#00000060"))
with(x, plot(kincaid,citations,log="y", pch=16, col="#00000060"))
with(x, plot(total_words,citations,log="y", pch=16, col="#00000060"))
with(x, plot(complex_words_title,citations,log="y", pch=16, col="#00000060")) # possibly interesting; try logistic regression, binary 0 or 1+
x$colon <- rep(NA,nrow(x))
for(i in 1:nrow(x)){
if(length(grep(":",x$title[i])) == 1){
x$colon[i] <- "yes"
}
else{
x$colon[i] <- "no"
}
}
x$colon %<>% factor
summary(x$colon)
### summarizing data with plot of the correlation matrix
op <- par(no.readonly = TRUE)
library(corrplot)
correlation_matrix <- cor(x[,-c(1,2,3,4,6,7,20:26,34,35,37)])
corrplot(correlation_matrix, is.corr=T,method="ellipse", hclust.method ="centroid", type="lower",col=magma(100))
correlation_matrix
x$citations_logged <- log(x$citations) + 1
with(x, plot(loadings, loadings2, pch= 16, col = viridis(70)[citations_logged] %>% addAlpha(0.99)))
with(x, plot(loadings,citations,log="y", pch=16, col="#00000060"))
with(x, plot(kincaid,citations,log="y", pch=16, col="#00000060"))
with(x, plot(total_words,citations,log="y", pch=16, col="#00000060"))
with(x, plot(complex_words_title,citations,log="y", pch=16, col="#00000060")) # possibly interesting; try logistic regression, binary 0 or 1+
x$colon <- rep(NA,nrow(x))
for(i in 1:nrow(x)){
if(length(grep(":",x$title[i])) == 1){
x$colon[i] <- "yes"
}
else{
x$colon[i] <- "no"
}
}
x$colon %<>% factor
summary(x$colon)
x$colon %<>% factor
summary(x$colon)
op <- par(no.readonly = TRUE)
library(corrplot)
correlation_matrix <- cor(x[,-c(1,2,3,4,6,7,20:26,34,35,37)])
corrplot(correlation_matrix, is.corr=T,method="ellipse", hclust.method ="centroid", type="lower",col=magma(100))
correlation_matrix
x$citations_logged
x$citations_logged <- log(x$citations+1)
with(x, plot(loadings, loadings2, pch= 16, col = viridis(70)[citations_logged] %>% addAlpha(0.99)))
with(x, plot(loadings,citations,log="y", pch=16, col="#00000060"))
with(x, plot(kincaid,citations,log="y", pch=16, col="#00000060"))
with(x, plot(total_words,citations,log="y", pch=16, col="#00000060"))
correlation_matrix <- cor(x[,-c(1,2,3,4,6,7,20:26,34,35,37)])
corrplot(correlation_matrix, is.corr=T,method="ellipse", hclust.method ="centroid", type="lower",col=magma(100))
correlation_matrix
correlation_matrix <- cor(x[,-c(1,2,3,4,6,7,20:26,34,35,37)])
correlation_matrix
head(x)
names(x)
summary(fit)
str(fit)
git$rotation
fit$rotation
names(x)
scatter(x$number_authors,x$citations_logged)
x$citations_logged <- log(x$citations) + 1
x <- x[is.finite(x$citations_logged),]
model <- lm(citations_logged~year,data=x)
x$year_residuals <- model$residuals
scatter(x$number_authors,x$year_residuals)
plot(year_residuals ~ number_authors, data = x[x$number_authors<50,])
lm(year_residuals ~ number_authors, data = x[x$number_authors<50,]) %>% summary
model <- lm(citations_logged ~ year + number_authors,data=x)
summary(model)
plot(x$citations_logged, x$kincaid)
model <- lm(citations_logged~year,data=x)
x$year_residuals <- model$residuals
model <- lm(citations_logged ~ year + number_authors,data=x)
x$year_author_residuals <- model$residuals
plot(x$citations_logged, x$kincaid)
plot(x$year_author_residuals, x$kincaid)
x %>% select(year_author_residuals < -4)
x %>% filter(year_author_residuals < -4)
x$citations_logged <- log(x$citations) + 1
x <- x[is.finite(x$citations_logged),]
model <- lm(citations_logged~year,data=x)
x$year_residuals <- model$residuals
plot(x$citations_logged, x$kincaid)
quantile(x$citations,c(0.1,0.9),na.rm=T)
plot(x$year_residuals, x$kincaid)
plot(x$year_residuals, x$kincaid, pch= 16, col = viridis(70)[citations_logged] %>% addAlpha(0.99))
plot(x$year_residuals, x$kincaid, pch= 16, col = viridis(100)[citations] %>% addAlpha(0.99))
plot(x$year_residuals, x$kincaid, pch= 16, col = viridis(100)[x$citations] %>% addAlpha(0.99))
plot(x$year_residuals, x$kincaid, pch= 16, col = viridis(256)[x$citations] %>% addAlpha(0.99))
x %>% filter(x$year_residuals < 2.5)
x %>% filter(x$year_residuals < -2.5)
plot(x$year_residuals, x$kincaid, pch= 16, col = viridis(60)[log(x$citations)] %>% addAlpha(0.99))
plot(x$year_residuals, x$kincaid, pch= 16, col = viridis(100)[log(x$citations)] %>% addAlpha(0.99))
log(x$citations) %>% man
log(x$citations) %>% max
plot(x$year_residuals, x$kincaid, pch= 16, col = viridis(7)[log(x$citations)] %>% addAlpha(0.99))
plot(x$year_residuals, x$kincaid, pch= 16, col = viridis(7)[log(x$citations)] %>% addAlpha(0.7))
model <- lm(citations_logged~year,data=x)
plot(model)
model <- lm(citations~year,data=x)
?family
model <- glm(citations~year,data=x, family="gaussian")
summary(model)
summary(lm(log(citations) ~ year,data=x))
model <- glm(citations ~year + number_authors ,data=x, family="gaussian")
x$year_residuals <- model$residuals
plot(x$year_residuals, x$kincaid, pch= 16, col = viridis(7)[log(x$citations)] %>% addAlpha(0.7))
model$residuals %>% hist
model$residuals %>% hist(main="them residuals is cray")
model <- glm(citations ~year + number_authors ,data=x, family="gaussian")
x$year_residuals <- model$residuals
hist(model$residuals)
model <- lm(citations ~year + number_authors ,data=x)
hist(model$residuals)
model <- lm(citations ~year + number_authors ,data=x, family = "Gamma")
?family
model <- glm(citations ~year + number_authors ,data=x, family="gaussian")
model <- glm(citations ~year + number_authors ,data=x, family="Gamma")
model <- glm(citations+1 ~ year + number_authors ,data=x, family="Gamma")
op <- par(no.readonly = TRUE)
library(corrplot)
correlation_matrix <- cor(x[,-c(1,2,3,4,6,7,20:26,34,35,37)])
corrplot(correlation_matrix, is.corr=T,method="ellipse", hclust.method ="centroid", type="lower",col=magma(100))
par()
corrplot(correlation_matrix, is.corr=T,method="ellipse", hclust.method ="centroid", type="lower",col=magma(100))
par(reset=TRUE)
resetPar <- function() {
dev.new()
op <- par(no.readonly = TRUE)
dev.off()
op
}
resetPar
resetPar()
corrplot(correlation_matrix, is.corr=T,method="ellipse", hclust.method ="centroid", type="lower",col=magma(100))
x$citations_logged <- log(x$citations) + 1
x <- x[is.finite(x$citations_logged),]
model <- glm(citations ~year + number_authors ,data=x, family="gaussian")
x$year_residuals <- model$residuals
hist(model$residuals)
plot(x$year_residuals, x$kincaid)
# to check, let's make sure that those papers with high and small residuals have lots and few citations
plot(x$year_residuals, x$kincaid, pch= 16, col = viridis(7)[log(x$citations)] %>% addAlpha(0.7))
### this can't be right
par(op)
plot(x$year_residuals, x$kincaid, pch= 16, col = viridis(7)[log(x$citations)] %>% addAlpha(0.7))
library(MASS)
quantile(x$year_residuals,c(0.5),na.rm=T)
x_ <- x %>% mutate(cited = ifelse(year_residuals < 0.04488432, "least", ifelse(year_residuals >= 0.04488432, "most",NA)))
x_$cited %<>% factor
summary(x_$cited)
x_ %<>% .[complete.cases(x_),]
reduced
bnames(x_)
names(x_)
reduced <- x_[,-c(1,2,5,6,7,20:26,34,35,36,37,38)]
model <- lda(reduced[, -c(19,20)], factor(reduced$cited))
head(model$scaling)
transform <- predict(model)
head(transform$x)
head(reduced)
names(reduced)
model <- lda(reduced[, -c(19,20,-21)], factor(reduced$cited))
reduced[, -c(19,20,-21)] %>% head
reduced[, -c(19,20,-21)] %>% head
reduced[, -c(19,20,21)] %>% head
names(reduced)
model <- lda(reduced[, -c(22,23)], factor(reduced$cited))
head(model$scaling)
transform <- predict(model)
head(transform$x)
reduced[,ncol(reduced)+1] <- transform$x
names(reduced)[ncol(reduced)] <- "LD"
boxplot(LD~cited,data=reduced, horizontal =T) # not super
model_CV <- lda(reduced[, -c(19,20)], factor(reduced$cited), CV = T)
(classification_matrix <- table(reduced$cited, model_CV$class))
diag(prop.table(classification_matrix, 1))
sum(diag(prop.table(classification_matrix))) # not great
model_CV <- lda(reduced[, -c(22,23)], factor(reduced$cited), CV = T)
(classification_matrix <- table(reduced$cited, model_CV$class))
diag(prop.table(classification_matrix, 1))
sum(diag(prop.table(classification_matrix))) # not great
bar(list(0.5,0.5))
barplot(list(0.5,0.5))
barplot(c(0.5,0.5))
barplot(c(0.5,0.5),ylim=c(0,1))
bar
barplot
?barplot
barplot(c(0.5,0.5),ylim=c(0,1), border=NA)
library(redingPlot)
bar(list(c(0.5),c(0.5))
)
bar(list(c(0.5),c(0.5)),jitter = F, sample_size = F, lab=c("nerd","hunk"))
bar(list(c(0.5),c(0.5)),jitter = F, sample_size = F, lab=c("nerd","hunk"), ylab="proportion of choices")
bar(list(c(0.8),c(0.2)),jitter = F, sample_size = F, lab=c("nerd","hunk"), ylab="proportion of choices")
viridis(5)[1:4]
plasma(5)[1:4]
T <- function(x){-log10(1-x)}
T(0.5)
T(0.7)
T(0.1)
(.52+.52-.05)/2
T(0.9)
T(0.01)
require(pwr)
?pwr.r.test
install.packages("pwr")
require(pwr)
pwr.r.test
?pwr.r.test
pwr.r.test(n=207300, sig.level = 0.000741,power=0.85)
pwr.r.test(n=263451, sig.level = 0.0000124,power=0.85)
library(redingPlot)
h = 6
w = 5
getwd()
setwd("~/Documents/redingPlot/examples/")
pdf("./beeStripBox.pdf", height = h, width = w)
data(iris); beeStripBox(iris$Sepal.Length,iris$Species,xlab="species",ylab="sepal length",main="beeStripBox() example")
dev.off()
h = 8
w = 7
## beeStripBox
pdf("./beeStripBox.pdf", height = h, width = w)
data(iris); beeStripBox(iris$Sepal.Length,iris$Species,xlab="species",ylab="sepal length",main="beeStripBox() example")
dev.off()
## bar
pdf("./bar.pdf", height = h, width= w)
bar(list(iris %>% filter(Species=="setosa") %>% .$Sepal.Length, iris %>% filter(Species=="versicolor") %>% .$Sepal.Length, iris %>% filter(Species=="virginica") %>% .$Sepal.Length),median=T,CI=T,lab=c("setosa","versicolor","virginica"),ylab="sepal length",main="bar() example")
dev.off()
## beeStrip
pdf("./beeStrip.pdf", height = h, width = 6)
beeStrip(list(iris %>% filter(Species=="setosa") %>% .$Sepal.Length, iris %>% filter(Species=="versicolor") %>% .$Sepal.Length, iris %>% filter(Species=="virginica") %>% .$Sepal.Length),lab=c("setosa","versicolor","virginica"),ylab="sepal length",main="beeStrip()",xlab="species")
dev.off()
## simple
pdf("./simple.pdf", height = h, width = w)
simple(list(iris %>% filter(Species=="setosa") %>% .$Sepal.Length, iris %>% filter(Species=="versicolor") %>% .$Sepal.Length, iris %>% filter(Species=="virginica") %>% .$Sepal.Length),lab=c("setosa","versicolor","virginica"),ylab="sepal length",main="simple()",xlab="species")
dev.off()
## strip
pdf("./strip.pdf", height = h, width = w)
strip(list(iris %>% filter(Species=="setosa") %>% .$Sepal.Length, iris %>% filter(Species=="versicolor") %>% .$Sepal.Length, iris %>% filter(Species=="virginica") %>% .$Sepal.Length),lab=c("setosa","versicolor","virginica"),ylab="sepal length",main="strip()",xlab="species",mean_col="black",point_size=1.4,type="ci") dev.off()
dev.off()
## scatter
pdf("./scatter.pdf", height = h, width = w)
scatter(trees[,1],trees[,2],xlab="tree girth (in.)",ylab="tree height (ft.)",main="scatter() example")
dev.off()
strip(list(iris %>% filter(Species=="setosa") %>% .$Sepal.Length, iris %>% filter(Species=="versicolor") %>% .$Sepal.Length, iris %>% filter(Species=="virginica") %>% .$Sepal.Length),lab=c("setosa","versicolor","virginica"),ylab="sepal length",main="strip()",xlab="species",mean_col="black",point_size=1.4,type="ci") dev.off()
strip(list(iris %>% filter(Species=="setosa") %>% .$Sepal.Length, iris %>% filter(Species=="versicolor") %>% .$Sepal.Length, iris %>% filter(Species=="virginica") %>% .$Sepal.Length),lab=c("setosa","versicolor","virginica"),ylab="sepal length",main="strip()",xlab="species",mean_col="black",point_size=1.4,type="ci")
pdf("./strip.pdf", height = h, width = w)
strip(list(iris %>% filter(Species=="setosa") %>% .$Sepal.Length, iris %>% filter(Species=="versicolor") %>% .$Sepal.Length, iris %>% filter(Species=="virginica") %>% .$Sepal.Length),lab=c("setosa","versicolor","virginica"),ylab="sepal length",main="strip()",xlab="species",mean_col="black",point_size=1.4,type="ci")
dev.off()
pdf("./strip.pdf", height = h, width = w)
strip(list(iris %>% filter(Species=="setosa") %>% .$Sepal.Length, iris %>% filter(Species=="versicolor") %>% .$Sepal.Length, iris %>% filter(Species=="virginica") %>% .$Sepal.Length),lab=c("setosa","versicolor","virginica"),ylab="sepal length",main="strip()",xlab="species",mean_col="black",point_size=1.4,type="ci")
dev.off()
strip(list(iris %>% filter(Species=="setosa") %>% .$Sepal.Length, iris %>% filter(Species=="versicolor") %>% .$Sepal.Length, iris %>% filter(Species=="virginica") %>% .$Sepal.Length),lab=c("setosa","versicolor","virginica"),ylab="sepal length",main="strip()",xlab="species",mean_col="black",point_size=1.4,type="ci")
?barplot
strip<-function(data,lab=rep(c(),length(data)),type="se",jitter=T,points=16,xlab="",ymin="determine",ymax="determine",point_size=1.2,mean_col = "red",cols = viridis(length(data)+2)[1:length(data)],...){
par(bty="l")
# error checking:
# if there are NAs in your dataset, throw an error
if(length(Filter(is.na,data))>0){
stop("there are NAs in your list")
}
number_groups<-length(data)
factor_names<-lab
if(ymin=="determine"&ymax=="determine"){
ymin <- min(unlist(data))
ymax <- max(unlist(data))
}
maximum_value=ymax*1.05
minimum_value=ymin*0.95
# use lapply to extract the means
means<-lapply(data,mean)
# use barplot in base R to get good x axis values
x_values <- barplot(unlist(means), plot=F) %>% as.vector
plot(c(0,x_values[number_groups]+0.2),c(minimum_value,maximum_value),type="n",xaxt="n",yaxt="n",xlab=xlab,...)
# create y axis with the numbers the correct direction
axis(2,las=2)
offset<- 0.15
if(type=="se"){
std_dev<-lapply(data,sd)
for(i in 1:length(data)){
std_error <- std_dev[[i]] / sqrt(length(data[[i]]))
arrows(x_values[i]+offset,means[[i]]-std_error,x_values[i]+offset,means[[i]]+std_error,angle=90,code=3,length=0,lwd=2)
}
}
if(type=="sd"){
std_dev<-lapply(data,sd)
for(i in 1:length(data)){
arrows(x_values[i]+offset,means[[i]]-std_dev[[i]],x_values[i]+offset,means[[i]]+std_dev[[i]],angle=90,code=3,length=0,lwd=2)
}
}
if(type=="ci"){
std_dev<-lapply(data,sd)
for(i in 1:length(data)){
std_error <- std_dev[[i]] / sqrt(length(data[[i]]))
arrows(x_values[i]+offset,t.test(data[[i]])$conf[1],x_values[i]+offset,t.test(data[[i]])$conf[2],angle=90,code=3,length=0,lwd=2)
}
}
# plot the means
for(i in 1:length(data)){
points(x=x_values[i]+offset,y=means[[i]],cex=point_size*1.1,pch=16,col=mean_col)
}
axis(side=1,at=x_values,labels=lab)
if(jitter==F){
# now to draw the points
for(i in 1:number_groups){
points(x=rep(x_values[i]-offset,length(data[[i]])),y=data[[i]],pch=points,col=cols[i])
}
}
else if(jitter==T){
for(i in 1:number_groups){
points(x=rep(x_values[i]-offset,length(data[[i]])) %>% jitter(amount=0.1),y=data[[i]],pch=points,col=cols[i],cex=point_size)
}
}
par(bty="o",lwd=1)
}
strip(list(iris %>% filter(Species=="setosa") %>% .$Sepal.Length, iris %>% filter(Species=="versicolor") %>% .$Sepal.Length, iris %>% filter(Species=="virginica") %>% .$Sepal.Length),lab=c("setosa","versicolor","virginica"),ylab="sepal length",main="strip()",xlab="species",mean_col="black",point_size=1.4,type="ci")
pdf("./simple.pdf", height = h, width = w)
simple(list(iris %>% filter(Species=="setosa") %>% .$Sepal.Length, iris %>% filter(Species=="versicolor") %>% .$Sepal.Length, iris %>% filter(Species=="virginica") %>% .$Sepal.Length),lab=c("setosa","versicolor","virginica"),ylab="sepal length",main="simple()",xlab="species")
dev.off()
pdf("./simple.pdf", height = h, width = w)
simple(list(iris %>% filter(Species=="setosa") %>% .$Sepal.Length, iris %>% filter(Species=="versicolor") %>% .$Sepal.Length, iris %>% filter(Species=="virginica") %>% .$Sepal.Length),lab=c("setosa","versicolor","virginica"),ylab="sepal length",main="simple()",xlab="species")
dev.off()
pdf("./simple.pdf", height = h, width = w)
simple(list(iris %>% filter(Species=="setosa") %>% .$Sepal.Length, iris %>% filter(Species=="versicolor") %>% .$Sepal.Length, iris %>% filter(Species=="virginica") %>% .$Sepal.Length),lab=c("setosa","versicolor","virginica"),ylab="sepal length",main="simple()",xlab="species")
dev.off()
pdf("./strip.pdf", height = h, width = w)
strip(list(iris %>% filter(Species=="setosa") %>% .$Sepal.Length, iris %>% filter(Species=="versicolor") %>% .$Sepal.Length, iris %>% filter(Species=="virginica") %>% .$Sepal.Length),lab=c("setosa","versicolor","virginica"),ylab="sepal length",main="strip()",xlab="species",mean_col="black",point_size=1.4,type="ci")
dev.off()
pdf("./scatter.pdf", height = 5, width = 6)
scatter(trees[,1],trees[,2],xlab="tree girth (in.)",ylab="tree height (ft.)",main="scatter() example")
dev.off()
# run to generate example graphs on the README
library(redingPlot)
setwd("~/Documents/redingPlot/examples/")
# define height and width
h = 8
w = 7
## beeStripBox
png("./beeStripBox.png", height = h, width = w)
data(iris); beeStripBox(iris$Sepal.Length,iris$Species,xlab="species",ylab="sepal length",main="beeStripBox() example")
dev.off()
## bar
png("./bar.png", height = h, width= w)
bar(list(iris %>% filter(Species=="setosa") %>% .$Sepal.Length, iris %>% filter(Species=="versicolor") %>% .$Sepal.Length, iris %>% filter(Species=="virginica") %>% .$Sepal.Length),median=T,CI=T,lab=c("setosa","versicolor","virginica"),ylab="sepal length",main="bar() example")
dev.off()
## beeStrip
png("./beeStrip.png", height = h, width = 6)
beeStrip(list(iris %>% filter(Species=="setosa") %>% .$Sepal.Length, iris %>% filter(Species=="versicolor") %>% .$Sepal.Length, iris %>% filter(Species=="virginica") %>% .$Sepal.Length),lab=c("setosa","versicolor","virginica"),ylab="sepal length",main="beeStrip()",xlab="species")
dev.off()
## simple
png("./simple.png", height = h, width = w)
simple(list(iris %>% filter(Species=="setosa") %>% .$Sepal.Length, iris %>% filter(Species=="versicolor") %>% .$Sepal.Length, iris %>% filter(Species=="virginica") %>% .$Sepal.Length),lab=c("setosa","versicolor","virginica"),ylab="sepal length",main="simple()",xlab="species")
dev.off()
## strip
png("./strip.png", height = h, width = w)
strip(list(iris %>% filter(Species=="setosa") %>% .$Sepal.Length, iris %>% filter(Species=="versicolor") %>% .$Sepal.Length, iris %>% filter(Species=="virginica") %>% .$Sepal.Length),lab=c("setosa","versicolor","virginica"),ylab="sepal length",main="strip()",xlab="species",mean_col="black",point_size=1.4,type="ci")
dev.off()
## scatter
png("./scatter.png", height = 5, width = 6)
scatter(trees[,1],trees[,2],xlab="tree girth (in.)",ylab="tree height (ft.)",main="scatter() example")
dev.off()
h = 8
w = 7
## beeStripBox
png("./beeStripBox.png", height = h, width = w)
data(iris); beeStripBox(iris$Sepal.Length,iris$Species,xlab="species",ylab="sepal length",main="beeStripBox() example")
dev.off()
pdf("./beeStripBox.png", height = h, width = w)
data(iris); beeStripBox(iris$Sepal.Length,iris$Species,xlab="species",ylab="sepal length",main="beeStripBox() example")
dev.off()
strip(list(iris %>% filter(Species=="setosa") %>% .$Sepal.Length, iris %>% filter(Species=="versicolor") %>% .$Sepal.Length, iris %>% filter(Species=="virginica") %>% .$Sepal.Length),lab=c("setosa","versicolor","virginica"),ylab="sepal length",main="strip()",xlab="species",mean_col="black",point_size=1.4,type="ci")
png("./strip.png", height = h, width = w)
strip(list(iris %>% filter(Species=="setosa") %>% .$Sepal.Length, iris %>% filter(Species=="versicolor") %>% .$Sepal.Length, iris %>% filter(Species=="virginica") %>% .$Sepal.Length),lab=c("setosa","versicolor","virginica"),ylab="sepal length",main="strip()",xlab="species",mean_col="black",point_size=1.4,type="ci")
function ()
