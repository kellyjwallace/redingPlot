if(CI == TRUE){
for(i in 1:(stats$n %>% length)){
lines(x=c(i,i), y=c(means[i], CIs_lower[i]), lwd=1.4, col="black")
lines(x=c(i,i), y=c(means[i], CIs_upper[i]), lwd=1.4, col="black")
}
}
# plot the data
if(plot_data==TRUE){
for(i in 1:(stats$n %>% length)){
points(x=rep(i, stats$n[i]) %>% jitter(amount = 0.05) + 0.25, y=by(y,x,c)[[i]], pch=16, col=colors[i], cex=1.1)
}
}
# plot means
points(1:(stats$n %>% length),means,pch=16,cex=1.3,col="black")
}
kitchen_sink(y=list(rnorm(10), rnorm(40),rexp(30,5)), SEM=F, CI=T, ylab="sepal", xlab = "species", main="test",color=viridis(4))
# boxplot with point for s.e.m. / ci
kitchen_sink <- function(y, x=NA, lab=NA, SEM=FALSE, CI=TRUE, box_thickness = 0.2, plot_data=T, colors = magma(5)[1:4], ...){
# if the data are entered as a list, coerse to a dataframe
if(missing(x)){
if(is.list(y)){
print("list")
# if its a list, turn it into a dataframe
# this is a stupid way to make this data frame, but whatever:
if(missing(lab)){
lab <- letters[1:length(y)]
}
labels <- c()
sizes <- sapply(y,length)
for(i in 1:length(y)){
labels <- c(labels,rep(lab[i], sizes[i]))
}
df <- data.frame(matrix(unlist(y), nrow=length(unlist(y)), byrow=T),labels)
names(df)<-c("dat","groups")
y <- df$dat
x <- df$groups
}
}
# plot boxes
(stats<-boxplot(y~x, boxwex = box_thickness, pars = list(medlty = 3, medlwd=0.5, boxlty=3, whisklty = c(3, 3), , medcex = 0.7, outcex = 0, staplelty = "blank"), ...))
# get means
tests <- by(y,x,t.test)
CIs_lower <- c()
CIs_upper <- c()
means <- c()
# get CIs
for(i in 1:length(tests)){
means <- c(means, tests[[i]]$estimate)
CIs_lower <- c(CIs_lower, tests[[i]]$conf.int[1])
CIs_upper <- c(CIs_upper, tests[[i]]$conf.int[2])
}
sems <- by(y,x,sd) %>% divide_by(sqrt(by(y,x,length))) %>% as.vector
# plot sems
if(SEM == TRUE){
for(i in 1:(stats$n %>% length)){
lines(x=c(i,i), y=c(means[i], means[i]+sems[i]), lwd=1.4, col="black")
lines(x=c(i,i), y=c(means[i], means[i]-sems[i]), lwd=1.4, col="black")
}
}
# plot CIs
if(CI == TRUE){
for(i in 1:(stats$n %>% length)){
lines(x=c(i,i), y=c(means[i], CIs_lower[i]), lwd=1.4, col="black")
lines(x=c(i,i), y=c(means[i], CIs_upper[i]), lwd=1.4, col="black")
}
}
# plot the data
if(plot_data==TRUE){
for(i in 1:(stats$n %>% length)){
points(x=rep(i, stats$n[i]) %>% jitter(amount = 0.05) + 0.25, y=by(y,x,c)[[i]], pch=16, col=colors[i], cex=1.1)
}
}
# plot means
points(1:(stats$n %>% length),means,pch=16,cex=1.3,col="black")
}
kitchen_sink(y=list(rnorm(10), rnorm(40),rexp(30,5)), SEM=F, CI=T, ylab="sepal", xlab = "species", main="test",color=viridis(4))
# boxplot with point for s.e.m. / ci
kitchen_sink <- function(y, x=NA, lab=NA, SEM=FALSE, CI=TRUE, box_thickness = 0.2, plot_data=T, colors = magma(5)[1:4], ...){
# if the data are entered as a list, coerse to a dataframe
if(missing(x)){
if(is.list(y)){
print("list")
# if its a list, turn it into a dataframe
# this is a stupid way to make this data frame, but whatever:
if(missing(lab)){
lab <- letters[1:length(y)]
}
labels <- c()
sizes <- sapply(y,length)
for(i in 1:length(y)){
labels <- c(labels,rep(lab[i], sizes[i]))
}
df <- data.frame(matrix(unlist(y), nrow=length(unlist(y)), byrow=T),labels)
names(df)<-c("dat","groups")
y <- df$dat
x <- df$groups
}
}
# plot boxes
(stats<-boxplot(y~x, boxwex = box_thickness, pars = list(medlty = 3, medlwd=0.5, boxlty=3, whisklty = c(3, 3), medcex = 0.7, outcex = 0, staplelty = "blank"), ...))
# get means
tests <- by(y,x,t.test)
CIs_lower <- c()
CIs_upper <- c()
means <- c()
# get CIs
for(i in 1:length(tests)){
means <- c(means, tests[[i]]$estimate)
CIs_lower <- c(CIs_lower, tests[[i]]$conf.int[1])
CIs_upper <- c(CIs_upper, tests[[i]]$conf.int[2])
}
sems <- by(y,x,sd) %>% divide_by(sqrt(by(y,x,length))) %>% as.vector
# plot sems
if(SEM == TRUE){
for(i in 1:(stats$n %>% length)){
lines(x=c(i,i), y=c(means[i], means[i]+sems[i]), lwd=1.4, col="black")
lines(x=c(i,i), y=c(means[i], means[i]-sems[i]), lwd=1.4, col="black")
}
}
# plot CIs
if(CI == TRUE){
for(i in 1:(stats$n %>% length)){
lines(x=c(i,i), y=c(means[i], CIs_lower[i]), lwd=1.4, col="black")
lines(x=c(i,i), y=c(means[i], CIs_upper[i]), lwd=1.4, col="black")
}
}
# plot the data
if(plot_data==TRUE){
for(i in 1:(stats$n %>% length)){
points(x=rep(i, stats$n[i]) %>% jitter(amount = 0.05) + 0.25, y=by(y,x,c)[[i]], pch=16, col=colors[i], cex=1.1)
}
}
# plot means
points(1:(stats$n %>% length),means,pch=16,cex=1.3,col="black")
}
kitchen_sink(y=list(rnorm(10), rnorm(40),rexp(30,5)), SEM=F, CI=T, ylab="sepal", xlab = "species", main="test",color=viridis(4))
# boxplot with point for s.e.m. / ci
kitchen_sink <- function(y, x=NA, lab=NA, SEM=FALSE, CI=TRUE, box_thickness = 0.2, plot_data=T, colors = magma(5)[1:4], ...){
# if the data are entered as a list, coerse to a dataframe
if(missing(x)){
if(is.list(y)){
print("list")
# if its a list, turn it into a dataframe
# this is a stupid way to make this data frame, but whatever:
if(missing(lab)){
lab <- letters[1:length(y)]
}
labels <- c()
sizes <- sapply(y,length)
for(i in 1:length(y)){
labels <- c(labels,rep(lab[i], sizes[i]))
}
df <- data.frame(matrix(unlist(y), nrow=length(unlist(y)), byrow=T),labels)
names(df)<-c("dat","groups")
y <- df$dat
x <- df$groups
}
}
# plot boxes
(stats<-boxplot(y~x, boxwex = box_thickness, pars = list(medlty = 4, medlwd=0.5, boxlty=4, whisklty = c(4, 4), medcex = 0.7, outcex = 0, staplelty = "blank"), ...))
# get means
tests <- by(y,x,t.test)
CIs_lower <- c()
CIs_upper <- c()
means <- c()
# get CIs
for(i in 1:length(tests)){
means <- c(means, tests[[i]]$estimate)
CIs_lower <- c(CIs_lower, tests[[i]]$conf.int[1])
CIs_upper <- c(CIs_upper, tests[[i]]$conf.int[2])
}
sems <- by(y,x,sd) %>% divide_by(sqrt(by(y,x,length))) %>% as.vector
# plot sems
if(SEM == TRUE){
for(i in 1:(stats$n %>% length)){
lines(x=c(i,i), y=c(means[i], means[i]+sems[i]), lwd=1.4, col="black")
lines(x=c(i,i), y=c(means[i], means[i]-sems[i]), lwd=1.4, col="black")
}
}
# plot CIs
if(CI == TRUE){
for(i in 1:(stats$n %>% length)){
lines(x=c(i,i), y=c(means[i], CIs_lower[i]), lwd=1.4, col="black")
lines(x=c(i,i), y=c(means[i], CIs_upper[i]), lwd=1.4, col="black")
}
}
# plot the data
if(plot_data==TRUE){
for(i in 1:(stats$n %>% length)){
points(x=rep(i, stats$n[i]) %>% jitter(amount = 0.05) + 0.25, y=by(y,x,c)[[i]], pch=16, col=colors[i], cex=1.1)
}
}
# plot means
points(1:(stats$n %>% length),means,pch=16,cex=1.3,col="black")
}
kitchen_sink(y=list(rnorm(10), rnorm(40),rexp(30,5)), SEM=F, CI=T, ylab="sepal", xlab = "species", main="test",color=viridis(4))
# boxplot with point for s.e.m. / ci
kitchen_sink <- function(y, x=NA, lab=NA, SEM=FALSE, CI=TRUE, box_thickness = 0.2, plot_data=T, colors = magma(5)[1:4], ...){
# if the data are entered as a list, coerse to a dataframe
if(missing(x)){
if(is.list(y)){
print("list")
# if its a list, turn it into a dataframe
# this is a stupid way to make this data frame, but whatever:
if(missing(lab)){
lab <- letters[1:length(y)]
}
labels <- c()
sizes <- sapply(y,length)
for(i in 1:length(y)){
labels <- c(labels,rep(lab[i], sizes[i]))
}
df <- data.frame(matrix(unlist(y), nrow=length(unlist(y)), byrow=T),labels)
names(df)<-c("dat","groups")
y <- df$dat
x <- df$groups
}
}
# plot boxes
(stats<-boxplot(y~x, boxwex = box_thickness, pars = list(medlty = 2, medlwd=0.6, boxlty=2, whisklty = c(2, 2), medcex = 1, outcex = 0, staplelty = "blank"), ...))
# get means
tests <- by(y,x,t.test)
CIs_lower <- c()
CIs_upper <- c()
means <- c()
# get CIs
for(i in 1:length(tests)){
means <- c(means, tests[[i]]$estimate)
CIs_lower <- c(CIs_lower, tests[[i]]$conf.int[1])
CIs_upper <- c(CIs_upper, tests[[i]]$conf.int[2])
}
sems <- by(y,x,sd) %>% divide_by(sqrt(by(y,x,length))) %>% as.vector
# plot sems
if(SEM == TRUE){
for(i in 1:(stats$n %>% length)){
lines(x=c(i,i), y=c(means[i], means[i]+sems[i]), lwd=1.4, col="black")
lines(x=c(i,i), y=c(means[i], means[i]-sems[i]), lwd=1.4, col="black")
}
}
# plot CIs
if(CI == TRUE){
for(i in 1:(stats$n %>% length)){
lines(x=c(i,i), y=c(means[i], CIs_lower[i]), lwd=1.4, col="black")
lines(x=c(i,i), y=c(means[i], CIs_upper[i]), lwd=1.4, col="black")
}
}
# plot the data
if(plot_data==TRUE){
for(i in 1:(stats$n %>% length)){
points(x=rep(i, stats$n[i]) %>% jitter(amount = 0.05) + 0.25, y=by(y,x,c)[[i]], pch=16, col=colors[i], cex=1.1)
}
}
# plot means
points(1:(stats$n %>% length),means,pch=16,cex=1.3,col="black")
}
kitchen_sink(y=list(rnorm(10), rnorm(40),rexp(30,5)), SEM=F, CI=T, ylab="sepal", xlab = "species", main="test",color=viridis(4))
# boxplot with point for s.e.m. / ci
kitchen_sink <- function(y, x=NA, lab=NA, SEM=FALSE, CI=TRUE, box_thickness = 0.2, plot_data=T, colors = magma(5)[1:4], ...){
# if the data are entered as a list, coerse to a dataframe
if(missing(x)){
if(is.list(y)){
print("list")
# if its a list, turn it into a dataframe
# this is a stupid way to make this data frame, but whatever:
if(missing(lab)){
lab <- letters[1:length(y)]
}
labels <- c()
sizes <- sapply(y,length)
for(i in 1:length(y)){
labels <- c(labels,rep(lab[i], sizes[i]))
}
df <- data.frame(matrix(unlist(y), nrow=length(unlist(y)), byrow=T),labels)
names(df)<-c("dat","groups")
y <- df$dat
x <- df$groups
}
}
# plot boxes
(stats<-boxplot(y~x, boxwex = box_thickness, pars = list(medlty = 2, medlwd=1, boxlty=2, whisklty = c(2, 2), medcex = 1, outcex = 0, staplelty = "blank"), ...))
# get means
tests <- by(y,x,t.test)
CIs_lower <- c()
CIs_upper <- c()
means <- c()
# get CIs
for(i in 1:length(tests)){
means <- c(means, tests[[i]]$estimate)
CIs_lower <- c(CIs_lower, tests[[i]]$conf.int[1])
CIs_upper <- c(CIs_upper, tests[[i]]$conf.int[2])
}
sems <- by(y,x,sd) %>% divide_by(sqrt(by(y,x,length))) %>% as.vector
# plot sems
if(SEM == TRUE){
for(i in 1:(stats$n %>% length)){
lines(x=c(i,i), y=c(means[i], means[i]+sems[i]), lwd=1.4, col="black")
lines(x=c(i,i), y=c(means[i], means[i]-sems[i]), lwd=1.4, col="black")
}
}
# plot CIs
if(CI == TRUE){
for(i in 1:(stats$n %>% length)){
lines(x=c(i,i), y=c(means[i], CIs_lower[i]), lwd=1.4, col="black")
lines(x=c(i,i), y=c(means[i], CIs_upper[i]), lwd=1.4, col="black")
}
}
# plot the data
if(plot_data==TRUE){
for(i in 1:(stats$n %>% length)){
points(x=rep(i, stats$n[i]) %>% jitter(amount = 0.05) + 0.25, y=by(y,x,c)[[i]], pch=16, col=colors[i], cex=1.1)
}
}
# plot means
points(1:(stats$n %>% length),means,pch=16,cex=1.3,col="black")
}
kitchen_sink(y=list(rnorm(10), rnorm(40),rexp(30,5)), SEM=F, CI=T, ylab="sepal", xlab = "species", main="test",color=viridis(4))
# boxplot with point for s.e.m. / ci
cats_meow <- function(y, x=NA, lab=NA, SEM=FALSE, CI=TRUE, box_thickness = 0.2, plot_data=T, colors = magma(5)[1:4], ...){
# if the data are entered as a list, coerse to a dataframe
if(missing(x)){
if(is.list(y)){
print("list")
# if its a list, turn it into a dataframe
# this is a stupid way to make this data frame, but whatever:
if(missing(lab)){
lab <- letters[1:length(y)]
}
labels <- c()
sizes <- sapply(y,length)
for(i in 1:length(y)){
labels <- c(labels,rep(lab[i], sizes[i]))
}
df <- data.frame(matrix(unlist(y), nrow=length(unlist(y)), byrow=T),labels)
names(df)<-c("dat","groups")
y <- df$dat
x <- df$groups
}
}
# plot boxes
(stats<-boxplot(y~x, boxwex = box_thickness, pars = list(medlty = 2, medlwd=1, boxlty=2, whisklty = c(2, 2), medcex = 1, outcex = 0, staplelty = "blank"), ...))
# get means
tests <- by(y,x,t.test)
CIs_lower <- c()
CIs_upper <- c()
means <- c()
# get CIs
for(i in 1:length(tests)){
means <- c(means, tests[[i]]$estimate)
CIs_lower <- c(CIs_lower, tests[[i]]$conf.int[1])
CIs_upper <- c(CIs_upper, tests[[i]]$conf.int[2])
}
sems <- by(y,x,sd) %>% divide_by(sqrt(by(y,x,length))) %>% as.vector
# plot sems
if(SEM == TRUE){
for(i in 1:(stats$n %>% length)){
lines(x=c(i,i), y=c(means[i], means[i]+sems[i]), lwd=1.4, col="black")
lines(x=c(i,i), y=c(means[i], means[i]-sems[i]), lwd=1.4, col="black")
}
}
# plot CIs
if(CI == TRUE){
for(i in 1:(stats$n %>% length)){
lines(x=c(i,i), y=c(means[i], CIs_lower[i]), lwd=1.4, col="black")
lines(x=c(i,i), y=c(means[i], CIs_upper[i]), lwd=1.4, col="black")
}
}
# plot the data
if(plot_data==TRUE){
for(i in 1:(stats$n %>% length)){
points(x=rep(i, stats$n[i]) %>% jitter(amount = 0.05) + 0.25, y=by(y,x,c)[[i]], pch=16, col=colors[i], cex=1.1)
}
}
# plot means
points(1:(stats$n %>% length),means,pch=16,cex=1.3,col="black")
}
cats_meow(y=list(rnorm(20), rnorm(40),rexp(30,5)), SEM=F, CI=T, ylab="sepal", xlab = "species", main="test",color=viridis(4))
cats_meow(y=list(rnorm(20), rnorm(40),rexp(30,5), rnorm(20)), SEM=F, CI=T, ylab="sepal", xlab = "species", main="test",color=viridis(4))
cats_meow(y=list(rnorm(20), rnorm(40),rexp(30,5), rnorm(20),rnorm(50,sd=2)), SEM=F, CI=T, ylab="sepal", xlab = "species", main="test",color=viridis(4))
cats_meow(y=list(rnorm(20), rnorm(40),rexp(30,5), rnorm(20),rnorm(50,sd=2)), SEM=F, CI=T, ylab="sepal", xlab = "species", main="test",color=viridis(5))
cats_meow(y=list(rnorm(20), rnorm(40),rexp(30,5), rnorm(20),rnorm(50,sd=2)), SEM=F, CI=T, ylab="sepal", xlab = "species", main="test",color=viridis(6))
cats_meow(y=list(rnorm(20), rnorm(40),rexp(30,5), rnorm(20),rnorm(50,sd=2)), SEM=F, CI=T, ylab="quantity", xlab = "group", main="test",color=viridis(6))
cats_meow(y=list(rnorm(20), rnorm(40),rexp(30,5), rnorm(20),rnorm(50,sd=2)), SEM=F, CI=T, ylab="quantity", xlab = "group", main="test",color=viridis(6) %>% addAlpha(0.5))
cats_meow(y=list(rnorm(20), rnorm(40),rexp(30,5), rnorm(20),rnorm(50,sd=2)), SEM=F, CI=T, ylab="quantity", xlab = "group", main="test",color=viridis(6))
cats_meow(iris$Sepal.Length,iris$Species, SEM=F, CI=T, ylab="quantity", xlab = "group", main="test",color=viridis(6))
cats_meow(iris$Sepal.Length,iris$Species, ylab="sepal length", xlab = "species", main="new plotting function",color=viridis(6))
cats_meow(iris$Sepal.Length,iris$Species, ylab="sepal length", xlab = "species", main="new plotting function",color=viridis(4))
?jitter
# boxplot with point for s.e.m. / ci + data jittered
cats_meow <- function(y, x=NA, lab=NA, SEM=FALSE, CI=TRUE, box_thickness = 0.2, plot_data=T, colors = magma(5)[1:4], ...){
# if the data are entered as a list, coerse to a dataframe
if(missing(x)){
if(is.list(y)){
# if its a list, turn it into a dataframe
# this is a stupid way to make this data frame, but whatever:
if(missing(lab)){
lab <- letters[1:length(y)]
}
labels <- c()
sizes <- sapply(y,length)
for(i in 1:length(y)){
labels <- c(labels,rep(lab[i], sizes[i]))
}
df <- data.frame(matrix(unlist(y), nrow=length(unlist(y)), byrow=T),labels)
names(df)<-c("dat","groups")
y <- df$dat
x <- df$groups
}
}
# plot boxes
(stats<-boxplot(y~x, boxwex = box_thickness, pars = list(medlty = 2, medlwd=1, boxlty=2, whisklty = c(2, 2), medcex = 1, outcex = 0, staplelty = "blank"), ...))
# run t-test to get CIs and means later
tests <- by(y,x,t.test)
CIs_lower <- c()
CIs_upper <- c()
means <- c()
# get CIs and means
for(i in 1:length(tests)){
means <- c(means, tests[[i]]$estimate)
CIs_lower <- c(CIs_lower, tests[[i]]$conf.int[1])
CIs_upper <- c(CIs_upper, tests[[i]]$conf.int[2])
}
sems <- by(y,x,sd) %>% divide_by(sqrt(by(y,x,length))) %>% as.vector
# plot sems
if(SEM == TRUE){
for(i in 1:(stats$n %>% length)){
lines(x=c(i,i), y=c(means[i], means[i]+sems[i]), lwd=1.4, col="black")
lines(x=c(i,i), y=c(means[i], means[i]-sems[i]), lwd=1.4, col="black")
}
}
# plot CIs
if(CI == TRUE){
for(i in 1:(stats$n %>% length)){
lines(x=c(i,i), y=c(means[i], CIs_lower[i]), lwd=1.4, col="black")
lines(x=c(i,i), y=c(means[i], CIs_upper[i]), lwd=1.4, col="black")
}
}
# plot the data
if(plot_data==TRUE){
for(i in 1:(stats$n %>% length)){
points(x=rep(i, stats$n[i]) %>% jitter(amount = 0.07) + 0.25, y=by(y,x,c)[[i]], pch=16, col=colors[i], cex=1.1)
}
}
# plot the means
points(1:(stats$n %>% length),means,pch=16,cex=1.3,col="black")
}
cats_meow(iris$Sepal.Length,iris$Species, ylab="sepal length", xlab = "species", main="new plotting function",color=viridis(4))
# boxplot with point for s.e.m. / ci + data jittered
cats_meow <- function(y, x=NA, lab=NA, SEM=FALSE, CI=TRUE, box_thickness = 0.2, plot_data=T, colors = magma(5)[1:4], ...){
# if the data are entered as a list, coerse to a dataframe
if(missing(x)){
if(is.list(y)){
# if its a list, turn it into a dataframe
# this is a stupid way to make this data frame, but whatever:
if(missing(lab)){
lab <- letters[1:length(y)]
}
labels <- c()
sizes <- sapply(y,length)
for(i in 1:length(y)){
labels <- c(labels,rep(lab[i], sizes[i]))
}
df <- data.frame(matrix(unlist(y), nrow=length(unlist(y)), byrow=T),labels)
names(df)<-c("dat","groups")
y <- df$dat
x <- df$groups
}
}
# plot boxes
(stats<-boxplot(y~x, boxwex = box_thickness, cex.alb=1.2,pars = list(medlty = 2, medlwd=1, boxlty=2, whisklty = c(2, 2), medcex = 1, outcex = 0, staplelty = "blank"), ...))
# run t-test to get CIs and means later
tests <- by(y,x,t.test)
CIs_lower <- c()
CIs_upper <- c()
means <- c()
# get CIs and means
for(i in 1:length(tests)){
means <- c(means, tests[[i]]$estimate)
CIs_lower <- c(CIs_lower, tests[[i]]$conf.int[1])
CIs_upper <- c(CIs_upper, tests[[i]]$conf.int[2])
}
sems <- by(y,x,sd) %>% divide_by(sqrt(by(y,x,length))) %>% as.vector
# plot sems
if(SEM == TRUE){
for(i in 1:(stats$n %>% length)){
lines(x=c(i,i), y=c(means[i], means[i]+sems[i]), lwd=1.4, col="black")
lines(x=c(i,i), y=c(means[i], means[i]-sems[i]), lwd=1.4, col="black")
}
}
# plot CIs
if(CI == TRUE){
for(i in 1:(stats$n %>% length)){
lines(x=c(i,i), y=c(means[i], CIs_lower[i]), lwd=1.4, col="black")
lines(x=c(i,i), y=c(means[i], CIs_upper[i]), lwd=1.4, col="black")
}
}
# plot the data
if(plot_data==TRUE){
for(i in 1:(stats$n %>% length)){
points(x=rep(i, stats$n[i]) %>% jitter(amount = 0.07) + 0.25, y=by(y,x,c)[[i]], pch=16, col=colors[i], cex=1.1)
}
}
# plot the means
points(1:(stats$n %>% length),means,pch=16,cex=1.3,col="black")
}
cats_meow(iris$Sepal.Length,iris$Species, ylab="sepal length", xlab = "species", main="new plotting function",color=viridis(4))
setwd("~/Documents/redingPlot/")
document()
library(roxygen2)
document()
library(devtools)
document()
install_github('lukereding/redingPlot')
