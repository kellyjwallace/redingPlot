names(y) <- c("dat", "groups")
}
labels<-levels(y$groups)
df <- data.table(y)
df %>% setkey(groups)
}
else{
# if its a list, turn it into a dataframe
# this is a stupid way to make this data frame, but whatever:
if(missing(lab)){
lab <- letters[1:length(y)]
print(paste("data entered as a list of length ", length(y)))
}
labels <- c()
sizes <- sapply(y,length)
for(i in 1:length(y)){
labels <- c(labels,rep(lab[i], sizes[i]))
}
df <- data.frame(matrix(unlist(y), nrow=length(unlist(y)), byrow=T),labels)
names(df)<-c("dat","groups")
y <- df$dat
x <- df$groups
df %<>% data.table
df %>% setkey(groups)
}
}
# get number of groups:
n_groups <- length(levels(df$groups))
print(paste("number of groups: ", n_groups))
box<- boxplot(df$dat~df$groups, border="white",at=0.95:n_groups-0.05, frame=F, xaxt="n", yaxt="n")
# plot the densities
for(i in 1:n_groups){
group <- levels(df$groups)[i]
# for each group, get a density estimate
d <- density(df[group]$dat)
# plot one half the plot
y <- (d$y*height)+i
polygon(y, d$x, col = colors[i], border=FALSE)
# plot the other half
y_otherside <- y - ((y-i)*2)
polygon(y_otherside, d$x, col = colors[i], border=FALSE)
# plot points:
#points(rep(i, nrow(df[labels[i]])), jitter(df[labels[i]]$dat), pch=16)
}
# stripchart(df$dat~df$groups,method="jitter", jitter=0.05,add=T,vertical=T, at=(1:n_groups)-0.1,pch=16,cex=0.8)
Boxplot(df$dat~df$groups,boxwex=0.3,col="#00000000",add=T,at=1:n_groups, frame=F, pars = list(medlty = 1, whisklty = c(1, 1), medcex = 1, outcex = 0, staplelty = "blank"),xaxt="n", yaxt="n", lwd=1.5, ...)
beeswarm(df$dat~df$groups, method="square", priority="density", pch=16, side=1, add=T, cex=point_size, frame=F,xaxt="n", yaxt="n")
# add axes
for(i in 1:n_groups){
mtext(unique(labels)[i],side=1, at=i)
}
axis(side=2)
return(list(df, labels))
}
violinplot2(iris %>% select(Species, Sepal.Width), height=.2)
beeswarm(iris %>% select(Species, Sepal.Width), height=.2)
beeswarm(iris %>% select(Sepal.Width), height=.2)
?beeswarm
beeswarm(iris %>% select(Sepal.Length), height=.2)
beeswarm(iris %>% select(Petal.Length), height=.2)
beeswarm(iris %>% select(Petal.Width), height=.2)
beeswarm(iris %>% select(Petal.Length), height=.2)
beeswarm(iris %>% select(Petal.Length), methpd="hex")
beeswarm(iris %>% select(Petal.Length), method="hex")
beeswarm(iris %>% select(Petal.Length), method="sqare")
beeswarm(iris %>% select(Petal.Length), method="square")
beeswarm(iris %>% select(Petal.Length), method="square", priority = "density")
beeswarm(iris %>% select(Petal.Length), method="square", priority = "random")
beeswarm(iris %>% select(Petal.Length), method="square", priority = "none")
violinplot2(PlantGrowth)
#violinplot2(PlantGrowth. height=0.2)
violinplot2(PlantGrowth. height=0.2)
violinplot2(PlantGrowth. height=0.2)
violinplot2(PlantGrowth, height=0.2)
violinplot(PlantGrowth. height=0.2)
violinplot(PlantGrowth, height=0.2)
head(violinplot)
violinplot(rnorm(40), rnorm(40))
violinplot(PlantGrowth)
violinplot(iris %>% select(Species, Petal.Length))
violinplot(iris %>% select(Species, Sepal.Length))
violinplot(iris %>% select(Species, Sepal.Length), lab = iris %>% select(Species) %>% as.character)
violinplot(iris %>% select(Species, Sepal.Length))
violinplot(iris %>% select(Species, Sepal.Length), xlab= "species")
violinplot(iris %>% select(Species, Sepal.Length), xlab= "species", ylab="sepal lenght")
violinplot(iris %>% select(Species, Sepal.Length), xlab= "species", ylab="sepal length")
violinplot <- function(y, colors="viridis", lab=NA,point_size=1.0, height=0.4, ...){
# if the data are entered as a list, coerse to a dataframe
if(missing(x)){
if(is.data.frame(y)){
print("data frame")
# if the first column contains the group names:
if(is.factor(y[,1])){
names(y) <- c("groups", "dat")
}
else{
names(y) <- c("dat", "groups")
}
labels<-levels(y$groups)
df <- data.table(y)
df %>% setkey(groups)
}
else{
# if its a list, turn it into a dataframe
# this is a stupid way to make this data frame, but whatever:
if(missing(lab)){
lab <- letters[1:length(y)]
print(paste("data entered as a list of length ", length(y)))
}
labels <- c()
sizes <- sapply(y,length)
for(i in 1:length(y)){
labels <- c(labels,rep(lab[i], sizes[i]))
}
df <- data.frame(matrix(unlist(y), nrow=length(unlist(y)), byrow=T),labels)
names(df)<-c("dat","groups")
y <- df$dat
x <- df$groups
df %<>% data.table
df %>% setkey(groups)
}
}
# get number of groups:
n_groups <- length(levels(df$groups))
print(paste("number of groups: ", n_groups))
# get the colors right
if(colors == "viridis"){
colors <- viridis(n_groups+2)[2:(n_groups+1)]
print(colors)
}
box<- boxplot(df$dat~df$groups, border="white",at=0.95:n_groups-0.05, frame=F, xaxt="n", yaxt="n")
# plot the densities
for(i in 1:n_groups){
group <- levels(df$groups)[i]
# for each group, get a density estimate
d <- density(df[group]$dat)
# plot one half the plot
if(missing(height)){
height <- 0.15*n_groups
}
y <- (d$y*height)+i
polygon(y, d$x, col = colors[i], border=FALSE)
# plot the other half
#y_otherside <- y - ((y-i)*2)
#polygon(y_otherside, d$x, col = colors[i], border=FALSE)
# plot points:
#points(rep(i, nrow(df[labels[i]])), jitter(df[labels[i]]$dat), pch=16)
}
# stripchart(df$dat~df$groups,method="jitter", jitter=0.05,add=T,vertical=T, at=(1:n_groups)-0.1,pch=16,cex=0.8)
Boxplot(df$dat~df$groups,boxwex=0.1,col="#00000000",add=T,at=0.95:n_groups-0.05, frame=F, pars = list(medlty = 1, whisklty = c(1, 1), medcex = 0.7, outcex = 0, staplelty = "blank"),xaxt="n", yaxt="n", cex.lab=1.2,...)
beeswarm(df$dat~df$groups, method="hex", priority="density", pch=16, side=1, add=T, cex=point_size, frame=F,xaxt="n", yaxt="n")
# add axes
for(i in 1:n_groups){
mtext(unique(labels)[i],side=1, at=i)
}
axis(side=2)
return(list(df, labels))
}
violinplot(iris %>% select(Species, Sepal.Length), xlab= "species", ylab="sepal length")
violinplot <- function(y, colors="viridis", lab=NA,point_size=1.0, height=0.4, ...){
# if the data are entered as a list, coerse to a dataframe
if(is.data.frame(y)){
print("data frame")
# if the first column contains the group names:
if(is.factor(y[,1])){
names(y) <- c("groups", "dat")
}
else{
names(y) <- c("dat", "groups")
}
labels<-levels(y$groups)
df <- data.table(y)
df %>% setkey(groups)
}
else{
# if its a list, turn it into a dataframe
# this is a stupid way to make this data frame, but whatever:
if(missing(lab)){
lab <- letters[1:length(y)]
print(paste("data entered as a list of length ", length(y)))
}
labels <- c()
sizes <- sapply(y,length)
for(i in 1:length(y)){
labels <- c(labels,rep(lab[i], sizes[i]))
}
df <- data.frame(matrix(unlist(y), nrow=length(unlist(y)), byrow=T),labels)
names(df)<-c("dat","groups")
y <- df$dat
x <- df$groups
df %<>% data.table
df %>% setkey(groups)
}
# get number of groups:
n_groups <- length(levels(df$groups))
print(paste("number of groups: ", n_groups))
# get the colors right
if(colors == "viridis"){
colors <- viridis(n_groups+2)[2:(n_groups+1)]
print(colors)
}
box<- boxplot(df$dat~df$groups, border="white",at=0.95:n_groups-0.05, frame=F, xaxt="n", yaxt="n")
# plot the densities
for(i in 1:n_groups){
group <- levels(df$groups)[i]
# for each group, get a density estimate
d <- density(df[group]$dat)
# plot one half the plot
if(missing(height)){
height <- 0.15*n_groups
}
y <- (d$y*height)+i
polygon(y, d$x, col = colors[i], border=FALSE)
# plot the other half
#y_otherside <- y - ((y-i)*2)
#polygon(y_otherside, d$x, col = colors[i], border=FALSE)
# plot points:
#points(rep(i, nrow(df[labels[i]])), jitter(df[labels[i]]$dat), pch=16)
}
# stripchart(df$dat~df$groups,method="jitter", jitter=0.05,add=T,vertical=T, at=(1:n_groups)-0.1,pch=16,cex=0.8)
Boxplot(df$dat~df$groups,boxwex=0.1,col="#00000000",add=T,at=0.95:n_groups-0.05, frame=F, pars = list(medlty = 1, whisklty = c(1, 1), medcex = 0.7, outcex = 0, staplelty = "blank"),xaxt="n", yaxt="n", cex.lab=1.2,...)
beeswarm(df$dat~df$groups, method="hex", priority="density", pch=16, side=1, add=T, cex=point_size, frame=F,xaxt="n", yaxt="n")
# add axes
for(i in 1:n_groups){
mtext(unique(labels)[i],side=1, at=i)
}
axis(side=2)
return(list(df, labels))
}
violinplot(iris %>% select(Species, Sepal.Length), xlab= "species", ylab="sepal length")
head(violinplot2,10)
violinplot2 <- function(y, colors=viridis(5) %>% addAlpha(0.6), lab=NA,point_size=1, height=0.4, ...){
# if the data are entered as a list, coerse to a dataframe
if(is.data.frame(y)){
print("data frame")
# if the first column contains the group names:
if(is.factor(y[,1])){
names(y) <- c("groups", "dat")
}
else{
names(y) <- c("dat", "groups")
}
labels<-levels(y$groups)
df <- data.table(y)
df %>% setkey(groups)
}
else{
# if its a list, turn it into a dataframe
# this is a stupid way to make this data frame, but whatever:
if(missing(lab)){
lab <- letters[1:length(y)]
print(paste("data entered as a list of length ", length(y)))
}
labels <- c()
sizes <- sapply(y,length)
for(i in 1:length(y)){
labels <- c(labels,rep(lab[i], sizes[i]))
}
df <- data.frame(matrix(unlist(y), nrow=length(unlist(y)), byrow=T),labels)
names(df)<-c("dat","groups")
y <- df$dat
x <- df$groups
df %<>% data.table
df %>% setkey(groups)
}
# get number of groups:
n_groups <- length(levels(df$groups))
print(paste("number of groups: ", n_groups))
box<- boxplot(df$dat~df$groups, border="white",at=0.95:n_groups-0.05, frame=F, xaxt="n", yaxt="n")
# plot the densities
for(i in 1:n_groups){
group <- levels(df$groups)[i]
# for each group, get a density estimate
d <- density(df[group]$dat)
# plot one half the plot
y <- (d$y*height)+i
polygon(y, d$x, col = colors[i], border=FALSE)
# plot the other half
y_otherside <- y - ((y-i)*2)
polygon(y_otherside, d$x, col = colors[i], border=FALSE)
# plot points:
#points(rep(i, nrow(df[labels[i]])), jitter(df[labels[i]]$dat), pch=16)
}
# stripchart(df$dat~df$groups,method="jitter", jitter=0.05,add=T,vertical=T, at=(1:n_groups)-0.1,pch=16,cex=0.8)
Boxplot(df$dat~df$groups,boxwex=0.3,col="#00000000",add=T,at=1:n_groups, frame=F, pars = list(medlty = 1, whisklty = c(1, 1), medcex = 1, outcex = 0, staplelty = "blank"),xaxt="n", yaxt="n", lwd=1.5, ...)
beeswarm(df$dat~df$groups, method="hex", priority="density", pch=16, side=1, add=T, cex=point_size, frame=F,xaxt="n", yaxt="n")
# add axes
for(i in 1:n_groups){
mtext(unique(labels)[i],side=1, at=i)
}
axis(side=2)
return(list(df, labels))
}
violinplot2(PlantGrowth. height=0.2)
violinplot2(PlantGrowth, height=0.2)
head(violinplot2,10)
violinplot2 <- function(y, colors=viridis(5) %>% addAlpha(0.6), lab=NA,point_size=1, height=0.4, ...){
# if the data are entered as a list, coerse to a dataframe
if(is.data.frame(y)){
print("data frame")
# if the first column contains the group names:
if(is.factor(y[,1])){
names(y) <- c("groups", "dat")
}
else{
names(y) <- c("dat", "groups")
}
labels<-levels(y$groups)
df <- data.table(y)
df %>% setkey(groups)
}
else{
# if its a list, turn it into a dataframe
# this is a stupid way to make this data frame, but whatever:
if(missing(lab)){
lab <- letters[1:length(y)]
print(paste("data entered as a list of length ", length(y)))
}
labels <- c()
sizes <- sapply(y,length)
for(i in 1:length(y)){
labels <- c(labels,rep(lab[i], sizes[i]))
}
df <- data.frame(matrix(unlist(y), nrow=length(unlist(y)), byrow=T),labels)
names(df)<-c("dat","groups")
y <- df$dat
x <- df$groups
df %<>% data.table
df %>% setkey(groups)
}
# get number of groups:
n_groups <- length(levels(df$groups))
print(paste("number of groups: ", n_groups))
box<- boxplot(df$dat~df$groups, border="white",at=0.95:n_groups-0.05, frame=F, xaxt="n", yaxt="n")
# plot the densities
for(i in 1:n_groups){
group <- levels(df$groups)[i]
# for each group, get a density estimate
d <- density(df[group]$dat)
# plot one half the plot
y <- (d$y*height)+i
polygon(y, d$x, col = colors[i], border=FALSE)
# plot the other half
y_otherside <- y - ((y-i)*2)
polygon(y_otherside, d$x, col = colors[i], border=FALSE)
# plot points:
#points(rep(i, nrow(df[labels[i]])), jitter(df[labels[i]]$dat), pch=16)
}
# stripchart(df$dat~df$groups,method="jitter", jitter=0.05,add=T,vertical=T, at=(1:n_groups)-0.1,pch=16,cex=0.8)
Boxplot(df$dat~df$groups,boxwex=0.3,col="#00000000",add=T,at=1:n_groups, frame=F, pars = list(medlty = 1, whisklty = c(1, 1), medcex = 1, outcex = 0, staplelty = "blank"),xaxt="n", yaxt="n", lwd=1.5, ...)
beeswarm(df$dat~df$groups, method="hex", priority="density", pch=16, add=T, cex=point_size, frame=F,xaxt="n", yaxt="n")
# add axes
for(i in 1:n_groups){
mtext(unique(labels)[i],side=1, at=i)
}
axis(side=2)
return(list(df, labels))
}
head(violinplot2,10)
violinplot2(PlantGrowth, height=0.2)
violinplot2(PlantGrowth, height=0.2)
violinplot2(iris %>% select(Species, Sepal.Length), xlab= "species", ylab="sepal length")
?beeswarm
violinplot2 <- function(y, colors=viridis(5) %>% addAlpha(0.6), lab=NA,point_size=1, height=0.4, point_col="black", ...){
# if the data are entered as a list, coerse to a dataframe
if(is.data.frame(y)){
print("data frame")
# if the first column contains the group names:
if(is.factor(y[,1])){
names(y) <- c("groups", "dat")
}
else{
names(y) <- c("dat", "groups")
}
labels<-levels(y$groups)
df <- data.table(y)
df %>% setkey(groups)
}
else{
# if its a list, turn it into a dataframe
# this is a stupid way to make this data frame, but whatever:
if(missing(lab)){
lab <- letters[1:length(y)]
print(paste("data entered as a list of length ", length(y)))
}
labels <- c()
sizes <- sapply(y,length)
for(i in 1:length(y)){
labels <- c(labels,rep(lab[i], sizes[i]))
}
df <- data.frame(matrix(unlist(y), nrow=length(unlist(y)), byrow=T),labels)
names(df)<-c("dat","groups")
y <- df$dat
x <- df$groups
df %<>% data.table
df %>% setkey(groups)
}
# get number of groups:
n_groups <- length(levels(df$groups))
print(paste("number of groups: ", n_groups))
box<- boxplot(df$dat~df$groups, border="white",at=0.95:n_groups-0.05, frame=F, xaxt="n", yaxt="n")
# plot the densities
for(i in 1:n_groups){
group <- levels(df$groups)[i]
# for each group, get a density estimate
d <- density(df[group]$dat)
# plot one half the plot
y <- (d$y*height)+i
polygon(y, d$x, col = colors[i], border=FALSE)
# plot the other half
y_otherside <- y - ((y-i)*2)
polygon(y_otherside, d$x, col = colors[i], border=FALSE)
# plot points:
#points(rep(i, nrow(df[labels[i]])), jitter(df[labels[i]]$dat), pch=16)
}
# stripchart(df$dat~df$groups,method="jitter", jitter=0.05,add=T,vertical=T, at=(1:n_groups)-0.1,pch=16,cex=0.8)
Boxplot(df$dat~df$groups,boxwex=0.3,col="#00000000",add=T,at=1:n_groups, frame=F, pars = list(medlty = 1, whisklty = c(1, 1), medcex = 1, outcex = 0, staplelty = "blank"),xaxt="n", yaxt="n", lwd=1.5, ...)
beeswarm(df$dat~df$groups, method="hex", priority="density", pch=16, add=T, cex=point_size, col= point_col, frame=F,xaxt="n", yaxt="n")
# add axes
for(i in 1:n_groups){
mtext(unique(labels)[i],side=1, at=i)
}
axis(side=2)
return(list(df, labels))
}
violinplot2(iris %>% select(Species, Sepal.Length), xlab= "species", ylab="sepal length")
violinplot2(iris %>% select(Species, Sepal.Length), xlab= "species", ylab="sepal length", point_col="grey50")
violinplot2(iris %>% select(Species, Sepal.Length), xlab= "species", ylab="sepal length", point_col="grey70")
violinplot2(iris %>% select(Species, Sepal.Length), xlab= "species", ylab="sepal length", point_col="grey20")
violinplot2 <- function(y, colors=viridis(5) %>% addAlpha(0.6), lab=NA,point_size=1, height=0.4, point_col="black", ...){
# if the data are entered as a list, coerse to a dataframe
if(is.data.frame(y)){
print("data frame")
# if the first column contains the group names:
if(is.factor(y[,1])){
names(y) <- c("groups", "dat")
}
else{
names(y) <- c("dat", "groups")
}
labels<-levels(y$groups)
df <- data.table(y)
df %>% setkey(groups)
}
else{
# if its a list, turn it into a dataframe
# this is a stupid way to make this data frame, but whatever:
if(missing(lab)){
lab <- letters[1:length(y)]
print(paste("data entered as a list of length ", length(y)))
}
labels <- c()
sizes <- sapply(y,length)
for(i in 1:length(y)){
labels <- c(labels,rep(lab[i], sizes[i]))
}
df <- data.frame(matrix(unlist(y), nrow=length(unlist(y)), byrow=T),labels)
names(df)<-c("dat","groups")
y <- df$dat
x <- df$groups
df %<>% data.table
df %>% setkey(groups)
}
# get number of groups:
n_groups <- length(levels(df$groups))
print(paste("number of groups: ", n_groups))
box<- boxplot(df$dat~df$groups, border="white",at=0.95:n_groups-0.05, frame=F, xaxt="n", yaxt="n")
# plot the densities
for(i in 1:n_groups){
group <- levels(df$groups)[i]
# for each group, get a density estimate
d <- density(df[group]$dat)
# plot one half the plot
y <- (d$y*height)+i
polygon(y, d$x, col = colors[i], border=FALSE)
# plot the other half
y_otherside <- y - ((y-i)*2)
polygon(y_otherside, d$x, col = colors[i], border=FALSE)
# plot points:
#points(rep(i, nrow(df[labels[i]])), jitter(df[labels[i]]$dat), pch=16)
}
# stripchart(df$dat~df$groups,method="jitter", jitter=0.05,add=T,vertical=T, at=(1:n_groups)-0.1,pch=16,cex=0.8)
Boxplot(df$dat~df$groups,boxwex=0.3,col="#00000000",add=T,at=1:n_groups, frame=F, pars = list(medlty = 1, whisklty = c(1, 1), medcex = 1, outcex = 0, staplelty = "blank"),xaxt="n", yaxt="n", lwd=1.5, cex.lab=1.2,...)
beeswarm(df$dat~df$groups, method="hex", priority="density", pch=16, add=T, cex=point_size, col= point_col, frame=F,xaxt="n", yaxt="n")
# add axes
for(i in 1:n_groups){
mtext(unique(labels)[i],side=1, at=i)
}
axis(side=2)
return(list(df, labels))
}
violinplot2(iris %>% select(Species, Sepal.Length), xlab= "species", ylab="sepal length", point_col="grey20")
h = 800*.7
w = 700*.8
setwd("~/Documents/redingPlot/examples/")
png("./violinplot.png", height = h, width = w)
violinplot(iris %>% select(Species, Sepal.Length), xlab= "species", ylab="sepal length", main="violinplot example")
dev.off()
# violinplot2
png("./violinplot2.png", height = h, width = w)
violinplot2(iris %>% select(Species, Sepal.Length), xlab= "species", ylab="sepal length")
dev.off()
sewd("~/Documents/redingPlot/")
setwd("~/Documents/redingPlot/")
document()
library(roxygen2)
document()
library(devtools)
document()
?paired
paired(rnorm(10,5), rnorm(10,7), lab = c("X", "X_paired"), ylab = "measurement", main="paired() example")
install_github("lukereding/redingPlot")
