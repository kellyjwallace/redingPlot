if(missing(lab)){
lab <- letters[1:length(data)]
}
labels <- c()
sizes <- sapply(x,length)
for(i in 1:length(data)){
labels <- c(labels,rep(lab[i], sizes[i]))
}
df <- data.frame(matrix(unlist(data), nrow=length(unlist(data)), byrow=T),labels)
data <- df[,1]
grouping <- df[,2] %>% factor
}
else{
print("not a list")
df <- data.frame(data,grouping)
}
#######################
number_groups<-nlevels(grouping)
if(missing(point_col)){
point_col=viridis(number_groups+2)[1:number_groups]
}
# to get nice x values for plotting, we'll use those generate by barplot()
x_values<-barplot(rep(1,number_groups),plot=F) %>% as.vector
# create the plot
plot(c(x_values[1]*0.4,x_values[length(x_values)]*1.2), xlim=c(x_values[1]*0.4,x_values[length(x_values)]*1.2),ylim=c(min(data,na.rm=T)*0.95, max(data,na.rm=T)*1.05),type="n",xaxt="n",yaxt="n",bty="l",...)
# create y axis with the numbers the correct direction
axis(2,las=2)
# find range of x:
ifelse(length(data)==1,xRange <- 0.5,xRange <- range(x_values,na.rm=T)[2]-range(x_values,na.rm=T)[1])
# plot the mean as a line
for(i in 1:number_groups){
lines(x=c(x_values[i]-0.2,x_values[i]+0.2),y=c(rep(mean(df[df[,2] %in% lab[i],1]),2)),col=line_color,lwd=line_width)
}
# create x axis
axis(side=1,at=x_values,labels=lab)
# make point_col length equal to number of groups
if(length(point_col==1)){
point_col = rep(point_col,number_groups)
}
# draw data points
if(jitter==T){
for(i in 1:number_groups){
points(x=rep(x_values[i], nrow(df[df[,2] %in% lab[i],])) %>% jitter(amount = 0.05), y=df[df[,2] %in% lab[i],1], pch=16, col=point_col[i], cex=point_size)
}
}
else{
for(i in 1:number_groups){
points(x=rep(x_values[i],length(df[df[,2] %in% lab[i],1])), y=df[df[,2] %in% lab[i],1], pch=16,col=point_col[i],cex=point_size)
}
}
# for rug plotting:
if(rug==T){
for(i in 1:number_groups){
rug(df[df[,2] %in% lab[i],1],side=4,col=addAlpha(point_col[i],0.4),lwd=4)
}
}
# for plotting the median as a diamond:
if(median==T){
points(x=x_values,y=by(df[,1], df[,2], median) %>% as.vector, pch=5, col=line_color, cex=1.5, lwd=3)
}
# for plotting sample size below each group
if(sample_size==TRUE){
for(i in 1:number_groups){
text(x_values[i],par("usr")[3]*1.03,paste("n = ", length(df[df[,2] %in% lab[i],1]),sep=""),col="grey20",pos=3)
}
}
}
simple(x,point_col=viridis(5),line_color="black",median=T,main="simple() dressed up")
simple(list(rnorm(24,10,2),rchisq(20,5),rexp(40,1/5),runif(40,5,15)),lab=c("normal","chi-squared","exponetial","uniform"),point_col=c(ruby,mint,slate,"goldenrod"),line_color="black",median=T)
data=x
if(is.list(data)){
print("list")
# if its a list, turn it into a dataframe
# this is a stupid way to make this data frame, but whatever:
if(missing(lab)){
lab <- letters[1:length(data)]
}
labels <- c()
sizes <- sapply(x,length)
for(i in 1:length(data)){
labels <- c(labels,rep(lab[i], sizes[i]))
}
df <- data.frame(matrix(unlist(data), nrow=length(unlist(data)), byrow=T),labels)
data <- df[,1]
grouping <- df[,2] %>% factor
}
if(missing(lab)){
lab <- letters[1:length(data)]
}
lab <- letters[1:length(data)]
labels <- c()
sizes <- sapply(x,length)
for(i in 1:length(data)){
labels <- c(labels,rep(lab[i], sizes[i]))
}
df <- data.frame(matrix(unlist(data), nrow=length(unlist(data)), byrow=T),labels)
data <- df[,1]
grouping <- df[,2] %>% factor
number_groups<-nlevels(grouping)
if(missing(point_col)){
point_col=viridis(number_groups+2)[1:number_groups]
}
# to get nice x values for plotting, we'll use those generate by barplot()
x_values<-barplot(rep(1,number_groups),plot=F) %>% as.vector
# create the plot
plot(c(x_values[1]*0.4,x_values[length(x_values)]*1.2), xlim=c(x_values[1]*0.4,x_values[length(x_values)]*1.2),ylim=c(min(data,na.rm=T)*0.95, max(data,na.rm=T)*1.05),type="n",xaxt="n",yaxt="n",bty="l",...)
# create y axis with the numbers the correct direction
axis(2,las=2)
# find range of x:
ifelse(length(data)==1,xRange <- 0.5,xRange <- range(x_values,na.rm=T)[2]-range(x_values,na.rm=T)[1])
# plot the mean as a line
for(i in 1:number_groups){
lines(x=c(x_values[i]-0.2,x_values[i]+0.2),y=c(rep(mean(df[df[,2] %in% lab[i],1]),2)),col=line_color,lwd=line_width)
}
# create x axis
axis(side=1,at=x_values,labels=lab)
# make point_col length equal to number of groups
if(length(point_col==1)){
point_col = rep(point_col,number_groups)
}
# draw data points
if(jitter==T){
for(i in 1:number_groups){
points(x=rep(x_values[i], nrow(df[df[,2] %in% lab[i],])) %>% jitter(amount = 0.05), y=df[df[,2] %in% lab[i],1], pch=16, col=point_col[i], cex=point_size)
}
}
else{
for(i in 1:number_groups){
points(x=rep(x_values[i],length(df[df[,2] %in% lab[i],1])), y=df[df[,2] %in% lab[i],1], pch=16,col=point_col[i],cex=point_size)
}
}
# for rug plotting:
if(rug==T){
for(i in 1:number_groups){
rug(df[df[,2] %in% lab[i],1],side=4,col=addAlpha(point_col[i],0.4),lwd=4)
}
}
# for plotting the median as a diamond:
if(median==T){
points(x=x_values,y=by(df[,1], df[,2], median) %>% as.vector, pch=5, col=line_color, cex=1.5, lwd=3)
}
median=T
df
by(df[,1], df[,2], median)
?by
by(df[,1], df[,2], meeam)
by(df[,1], df[,2], meam)
by(df[,1], df[,2], mean)
points(x=x_values,y=by(df[,1], df[,2], mean) %>% as.vector, pch=5, col=line_color, cex=1.5, lwd=3)
points(x=x_values,y=by(df[,1], df[,2], mean) %>% as.vector)
if(median==T){
for(i 1:number_groups){
points(x=x_values[i],y=median(df[df[,2] %in% lab[i],1]), pch=5, col=line_color, cex=1.5, lwd=3)
}
}
if(median==T){
for(i 1:number_groups){
points(x=x_values[i],y=median(df[df[,2] %in% lab[i],1]), pch=5, col=line_color, cex=1.5, lwd=3)
}
}
if(median==T){
for(i in 1:number_groups){
points(x=x_values[i],y=median(df[df[,2] %in% lab[i],1]), pch=5, col=line_color, cex=1.5, lwd=3)
}
}
if(median==T){
for(i in 1:number_groups){
points(x=x_values[i],y=median(df[df[,2] %in% lab[i],1]), pch=5, col="red", cex=1.5, lwd=3)
}
}
if(sample_size==TRUE){
for(i in 1:number_groups){
text(x_values[i],par("usr")[3]*1.03,paste("n = ", length(df[df[,2] %in% lab[i],1]),sep=""),col="grey20",pos=3)
}
}
}
sample_size=T
if(sample_size==TRUE){
for(i in 1:number_groups){
text(x_values[i],par("usr")[3]*1.03,paste("n = ", length(df[df[,2] %in% lab[i],1]),sep=""),col="grey20",pos=3)
}
}
}
simple<-function(data,grouping,lab=NA,point_size=1.2,line_color="red",line_width=3.0,jitter=T,point_col=NA,median=FALSE,rug=TRUE,sample_size=T,...){
# if response is missing, assume data is a list
if(missing(grouping)){
if(is.list(data)==FALSE){
stop("enter your data either as a list or as a response variable and factor within a dataframe")
}
}
if(is.list(data)){
print("list")
# if its a list, turn it into a dataframe
# this is a stupid way to make this data frame, but whatever:
if(missing(lab)){
lab <- letters[1:length(data)]
}
labels <- c()
sizes <- sapply(x,length)
for(i in 1:length(data)){
labels <- c(labels,rep(lab[i], sizes[i]))
}
df <- data.frame(matrix(unlist(data), nrow=length(unlist(data)), byrow=T),labels)
data <- df[,1]
grouping <- df[,2] %>% factor
}
else{
print("not a list")
df <- data.frame(data,grouping)
}
#######################
number_groups<-nlevels(grouping)
if(missing(point_col)){
point_col=viridis(number_groups+2)[1:number_groups]
}
# to get nice x values for plotting, we'll use those generate by barplot()
x_values<-barplot(rep(1,number_groups),plot=F) %>% as.vector
# create the plot
plot(c(x_values[1]*0.4,x_values[length(x_values)]*1.2), xlim=c(x_values[1]*0.4,x_values[length(x_values)]*1.2),ylim=c(min(data,na.rm=T)*0.95, max(data,na.rm=T)*1.05),type="n",xaxt="n",yaxt="n",bty="l",...)
# create y axis with the numbers the correct direction
axis(2,las=2)
# find range of x:
ifelse(length(data)==1,xRange <- 0.5,xRange <- range(x_values,na.rm=T)[2]-range(x_values,na.rm=T)[1])
# plot the mean as a line
for(i in 1:number_groups){
lines(x=c(x_values[i]-0.2,x_values[i]+0.2),y=c(rep(mean(df[df[,2] %in% lab[i],1]),2)),col=line_color,lwd=line_width)
}
# create x axis
axis(side=1,at=x_values,labels=lab)
# make point_col length equal to number of groups
if(length(point_col==1)){
point_col = rep(point_col,number_groups)
}
# draw data points
if(jitter==T){
for(i in 1:number_groups){
points(x=rep(x_values[i], nrow(df[df[,2] %in% lab[i],])) %>% jitter(amount = 0.05), y=df[df[,2] %in% lab[i],1], pch=16, col=point_col[i], cex=point_size)
}
}
else{
for(i in 1:number_groups){
points(x=rep(x_values[i],length(df[df[,2] %in% lab[i],1])), y=df[df[,2] %in% lab[i],1], pch=16,col=point_col[i],cex=point_size)
}
}
# for rug plotting:
if(rug==T){
for(i in 1:number_groups){
rug(df[df[,2] %in% lab[i],1],side=4,col=addAlpha(point_col[i],0.4),lwd=4)
}
}
# for plotting the median as a diamond:
if(median==T){
for(i in 1:number_groups){
points(x=x_values[i],y=median(df[df[,2] %in% lab[i],1]), pch=5, col=line_color, cex=1.5, lwd=3)
}
}
# for plotting sample size below each group
if(sample_size==TRUE){
for(i in 1:number_groups){
text(x_values[i],par("usr")[3]*1.03,paste("n = ", length(df[df[,2] %in% lab[i],1]),sep=""),col="grey20",pos=3)
}
}
}
simple(list(rnorm(24,10,2),rchisq(20,5),rexp(40,1/5),runif(40,5,15)),lab=c("normal","chi-squared","exponetial","uniform"),point_col=c(ruby,mint,slate,"goldenrod"),line_color="black",median=T)
x<-list(rnorm(24,10,2),rchisq(20,5),rexp(40,1/5),runif(40,5,15));lab=c("normal","chi-squared","exponetial","uniform")
print("list")
# if its a list, turn it into a dataframe
# this is a stupid way to make this data frame, but whatever:
labels <- c()
sizes <- sapply(x,length)
for(i in 1:length(data)){
labels <- c(labels,rep(lab[i], sizes[i]))
}
df <- data.frame(matrix(unlist(data), nrow=length(unlist(data)), byrow=T),labels)
data <- df[,1]
grouping <- df[,2] %>% factor
}
labels <- c()
sizes <- sapply(x,length)
x
sizes
labels <- c()
sizes <- sapply(x,length)
for(i in 1:length(data)){
labels <- c(labels,rep(lab[i], sizes[i]))
}
1:length(data)
x<-data<-list(rnorm(24,10,2),rchisq(20,5),rexp(40,1/5),runif(40,5,15));lab=c("normal","chi-squared","exponetial","uniform")
labels <- c()
sizes <- sapply(x,length)
for(i in 1:length(data)){
labels <- c(labels,rep(lab[i], sizes[i]))
}
df <- data.frame(matrix(unlist(data), nrow=length(unlist(data)), byrow=T),labels)
df
df <- data.frame(matrix(unlist(data), nrow=length(unlist(data)), byrow=T),labels)
data <- df[,1]
grouping <- df[,2] %>% factor
rm(list=ls())
simple<-function(data,grouping,lab=NA,point_size=1.2,line_color="red",line_width=3.0,jitter=T,point_col=NA,median=FALSE,rug=TRUE,sample_size=T,...){
# if response is missing, assume data is a list
if(missing(grouping)){
if(is.list(data)==FALSE){
stop("enter your data either as a list or as a response variable and factor within a dataframe")
}
}
if(is.list(data)){
print("list")
# if its a list, turn it into a dataframe
# this is a stupid way to make this data frame, but whatever:
if(missing(lab)){
lab <- letters[1:length(data)]
}
labels <- c()
sizes <- sapply(x,length)
for(i in 1:length(data)){
labels <- c(labels,rep(lab[i], sizes[i]))
}
df <- data.frame(matrix(unlist(data), nrow=length(unlist(data)), byrow=T),labels)
data <- df[,1]
grouping <- df[,2] %>% factor
}
else{
print("not a list")
df <- data.frame(data,grouping)
}
#######################
number_groups<-nlevels(grouping)
if(missing(point_col)){
point_col=viridis(number_groups+2)[1:number_groups]
}
# to get nice x values for plotting, we'll use those generate by barplot()
x_values<-barplot(rep(1,number_groups),plot=F) %>% as.vector
# create the plot
plot(c(x_values[1]*0.4,x_values[length(x_values)]*1.2), xlim=c(x_values[1]*0.4,x_values[length(x_values)]*1.2),ylim=c(min(data,na.rm=T)*0.95, max(data,na.rm=T)*1.05),type="n",xaxt="n",yaxt="n",bty="l",...)
# create y axis with the numbers the correct direction
axis(2,las=2)
# find range of x:
ifelse(length(data)==1,xRange <- 0.5,xRange <- range(x_values,na.rm=T)[2]-range(x_values,na.rm=T)[1])
# plot the mean as a line
for(i in 1:number_groups){
lines(x=c(x_values[i]-0.2,x_values[i]+0.2),y=c(rep(mean(df[df[,2] %in% lab[i],1]),2)),col=line_color,lwd=line_width)
}
# create x axis
axis(side=1,at=x_values,labels=lab)
# make point_col length equal to number of groups
if(length(point_col==1)){
point_col = rep(point_col,number_groups)
}
# draw data points
if(jitter==T){
for(i in 1:number_groups){
points(x=rep(x_values[i], nrow(df[df[,2] %in% lab[i],])) %>% jitter(amount = 0.05), y=df[df[,2] %in% lab[i],1], pch=16, col=point_col[i], cex=point_size)
}
}
else{
for(i in 1:number_groups){
points(x=rep(x_values[i],length(df[df[,2] %in% lab[i],1])), y=df[df[,2] %in% lab[i],1], pch=16,col=point_col[i],cex=point_size)
}
}
# for rug plotting:
if(rug==T){
for(i in 1:number_groups){
rug(df[df[,2] %in% lab[i],1],side=4,col=addAlpha(point_col[i],0.4),lwd=4)
}
}
# for plotting the median as a diamond:
if(median==T){
for(i in 1:number_groups){
points(x=x_values[i],y=median(df[df[,2] %in% lab[i],1]), pch=5, col=line_color, cex=1.5, lwd=3)
}
}
# for plotting sample size below each group
if(sample_size==TRUE){
for(i in 1:number_groups){
text(x_values[i],par("usr")[3]*1.03,paste("n = ", length(df[df[,2] %in% lab[i],1]),sep=""),col="grey20",pos=3)
}
}
}
simple(list(rnorm(24,10,2),rchisq(20,5),rexp(40,1/5),runif(40,5,15)),lab=c("normal","chi-squared","exponetial","uniform"),point_col=c(ruby,mint,slate,"goldenrod"),line_color="black",median=T)
simple(list(rnorm(24,10,2),rchisq(20,5),rexp(40,1/5),runif(40,5,15)),lab=c("normal","chi-squared","exponetial","uniform"),point_col=c(ruby,mint,slate,"goldenrod"),line_color="black",median=T)
simple(data=list(rnorm(24,10,2),rchisq(20,5),rexp(40,1/5),runif(40,5,15)),lab=c("normal","chi-squared","exponetial","uniform"),point_col=c(ruby,mint,slate,"goldenrod"),line_color="black",median=T)
simple(data=list(rnorm(24,10,2),rchisq(20,5),rexp(40,1/5),runif(40,5,15)),lab=c("normal","chi-squared","exponetial","uniform"),point_col=c(ruby,mint,slate,"goldenrod"),line_color="black",median=T)
require(redingPlot)
?simple
simple(iris$Sepal.Length,iris$Species) # the simpler way
simple(x,point_col=viridis(5),line_color="black",median=T,main="simple() dressed up")
x <- list(rnorm(40,40,5),rnorm(20,35,2),rnorm(25,41,2)) ; simple(x,main="simple() defaults") # using the defaults
simple(x,line_col="black",point_col=c(ruby,mint,slate),ylab="measurement",xlab="group",lab=c("A","B","C"),rug=T)
ruby <-rgb(202/255,53/255,7/255,1)
slate <- rgb(137/255,157/255,164/255,1)
mint <- rgb(73/255,191/255,150/255,1)
golden <- rgb(218/255,165/255,32/255,1)
orange <- rgb(227/255,121/255,46/255,1)
sky <- rgb(95/255,188/255,212/255,1)
simple(x,line_col="black",point_col=c(ruby,mint,slate),ylab="measurement",xlab="group",lab=c("A","B","C"),rug=T)
?pf
pf(2.97,1,15)
pf(.86,1,15)
pf(.86,1,8)
pf(.86,1,8,lower.tail=F)
pf(2.97,1,15,lower/tail=F)
pf(2.97,1,15,lower.tail=F)
?os
head(iris)
?str
str(iris)
iris[1:5,1:2]
iris[1:5,]
plot(iris)
setosa <- subset(iris, iris$Species=="setosa")
setosa
plot()
plot()
source('~/.active-rstudio-document', echo=TRUE)
plot(setosa$Petal.Length, setosa$Petal.Width)
data(trees)
trees
?trees
plot(trees$Girth, trees$Volume)
?stem
stem(trees$Girth)
hist(trees$Height)
?hist
hist(trees$Height,breaks=10)
hist(trees$Height,breaks=15)
hist(trees$Height,breaks=10)
boxplot(trees$Height)
stem(trees$Height)
?dotchart
dotchart(trees$Height)
dotplot(trees$Height)
?dotchart
dotchart(as.matrix(trees))
?beeswarm
?dotchart
dotchart(VADeaths, main = "Death Rates in Virginia - 1940")
dotchart(VADeaths, main = "Death Rates in Virginia - 1940",pch=16)
plot(trees$Girth, trees$Volume)
?plot
?trees
?plotmath
plot(trees$Girth, trees$Volume, pch=16, xlab="girth (in.)", ylab= expression(feet^3))
plot(trees$Girth, trees$Volume, pch=16, xlab="girth (in.)", ylab= expression(volumefeet^3))
plot(trees$Girth, trees$Volume, pch=16, xlab="girth (in.)", ylab= expression(volume feet^3))
plot(trees$Girth, trees$Volume, pch=16, xlab="girth (in.)", ylab= expression(feet^3))
plot(trees$Girth, trees$Volume, pch=16, xlab="girth (in.)", ylab= paste("volume (", expression(feet^3),")")
plot(trees$Girth, trees$Volume, pch=16, xlab="girth (in.)", ylab= paste("volume (", expression(feet^3),")")
plot(trees$Girth, trees$Volume, pch=16, xlab="girth (in.)", ylab= paste("volume (", expression(feet^3),")"))
plot(trees$Girth, trees$Volume, pch=16, xlab="girth (in.)", ylab= paste("volume (", expression(feet^3),")",sep=""))
plot(trees$Girth, trees$Volume, pch=16, xlab="girth (in.)", ylab= expression(volume (feet^3))
plot(trees$Girth, trees$Volume, pch=16, xlab="girth (in.)", ylab= expression(volume (feet^3)))
plot(trees$Girth, trees$Volume, pch=16, xlab="girth (in.)", ylab= expression(feet^3))
plot(trees$Girth, trees$Volume, pch=16, xlab="girth (in.)", ylab= expression(feet^3),cex.lab=1.3)
plot(trees$Girth, trees$Volume, pch=16, xlab="girth (in.)", ylab= expression(feet^3), cex.lab=1.2, main="relationship between girth and volume")
plot(trees$Girth, trees$Volume, pch=16, xlab="girth (in.)", ylab= expression(feet^3), cex.lab=1.2, main="relationship between girth and volume",bty="l")
?abline
summary(lm(Volume~Girth, data=trees))
abline(a=-36.94,5.0659,col="red")
scatter(trees$Girth, trees$Height)
library(redingPlot)
scatter(trees$Girth, trees$Height)
?scatter
scatter(trees$Girth, trees$Volume,xlab="tree girth (in.)",ylab="tree volume (cu. ft.)",main="relationship between girth and volume")
head(iris)
boxplot(Pedal.Width~Species, data=iris)
boxplot(Petal.Width~Species, data=iris)
boxplot(iris$Petal.Width~iris$Species)
strip(iris$Petal.Width~iris$Species)
beeStrip(iris$Petal.Width~iris$Species)
beeStripBox(iris$Petal.Width~iris$Species)
?beeStripBox(iris$Petal.Width~iris$Species)
beeStripBox(iris$Sepal.Length,iris$Species)
beeStripBox(iris$Petal.Length,iris$Species)
beeStripBox(iris$Petal.Wodth,iris$Species)
beeStripBox(iris$Petal.Width,iris$Species)
beeStripBox(iris$Petal.Width,iris$Species,stats=F)
beeStripBox(iris$Petal.Width,iris$Species,stats=F,ylab="pedal width")
beeStripBox(iris$Petal.Width,iris$Species,stats=F,ylab="pedal width")
beeStripBox(iris$Petal.Width,iris$Species,stats=F,ylab="pedal width", xlab="species")
?barplot
barplot(Petal.Width~Species, data=iris)
barplot(Petal.Width~Species)
?dotchart
dotchart(iris)
dotchart(iris$Species)
dotchart(iris$Sepal.Width)
?simple
simple(iris$Sepal.Length,iris$Species)
?beeswarm
beeswarm(Petal.Width~Species, data=iris)
beeswarm(Petal.Width~Species, data=iris,col=magma(5)[1:3])
beeswarm(Petal.Width~Species, data=iris,col=magma(5)[1:3],pch=16)
log10(100)
log(100)
?c
set.seed(10); scatter(rnorm(20), rnorm(20))
set.seed(11); scatter(rnorm(20), rnorm(20))
set.seed(12); scatter(rnorm(20), rnorm(20))
set.seed(13); scatter(rnorm(20), rnorm(20))
set.seed(14); scatter(rnorm(20), rnorm(20))
for(i in 1:40){set.seed(i); scatter(rnorm(20), rnorm(20), main=paste(i)) }
set.seed(19)
scatter(rnorm(20), rnorm(20), xlab="X",ylab="Y")
head(iris)
library(redingPlot)
?cats_meow
setwd("~/Documents/redingPlot/")
library(roxygen2)
library(devtools)
document()
install_github("lukereding/redingPlot")
