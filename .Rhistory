if(c>0){
legend(x="bottomright",bty="n",legend=rp, y.intersp=1.2,cex=0.9,inset = 0.01)
}
else{
legend(x="bottomleft",bty="n",legend=rp,y.intersp=0.8,inset = 0.05)
}
}
# reset the par values
on.exit(par(op))
}
scatter_hist(rnorm(30), rnorm(30),title="test", ylab= "y label", xlab="x label")
# code adapted from from http://www.r-bloggers.com/example-10-3-enhanced-scatterplot-with-marginal-histograms/
scatter_hist<-function(x,y,xlab="",ylab="",title = "",line=T,stats=TRUE,color="black",line_col="red",confidenceInterval=T,plottingCharacter=16,rug = F,...){
op <- par(no.readonly = TRUE)
par(lwd=1,cex=1,bg="white",xpd=FALSE)
zones <- matrix(c(1,1,1,
0,5,0,
2,6,4,
0,3,0), ncol = 3, byrow = TRUE)
layout(zones, widths=c(0.3,3,1), heights = c(1,3,8,.75))
# error checking
if(length(x)!=length(y)){
stop("x and y lengths differ")
}
# get histograms
xhist <- hist(x,plot=FALSE)
yhist <- hist(y, plot=FALSE)
top <- max(c(xhist$counts, yhist$counts))
par(xaxt="n", yaxt="n",bty="n",  mar = c(.3,2,.3,0) +.05)
# main title
plot(x=1,y=1,type="n",ylim=c(-1,1), xlim=c(-1,1))
text(0,0,paste(title), cex=2)
# y label
plot(x=1,y=1,type="n",ylim=c(-1,1), xlim=c(-1,1))
text(0,0,paste(ylab), cex=1.5, srt=90)
# x label
plot(x=1,y=1,type="n",ylim=c(-1,1), xlim=c(-1,1))
text(0,0,paste(xlab), cex=1.5)
# y histogram
par(mar = c(2,0,1,1))
barplot(yhist$counts, axes = FALSE, xlim = c(0, top),space = 0, horiz = TRUE, col="grey50", border="grey50")
# x histogram
par(mar = c(0,2,1,1))
barplot(xhist$counts, axes = FALSE, ylim = c(0, top), space = 0, col="grey50", border="grey50")
# do the actual plotting
par(mar = c(2,2,.5,.5), xaxt="s", yaxt="s", bty="n")
plot(x,y,xlab=xlab,ylab=ylab,pch=plottingCharacter,yaxt='n',bty="l",col=color,cex.lab=1.2,...)
axis(2, las=2)
p.value<-summary(lm(y~x))$coefficients[2,4]
c<-summary(lm(y~x))$coefficients[2,1]
r_squared <- summary(lm(y~x))$r.squared %>% round(3)
sample_size <- length(x)
# draw the line of best fit
if(line==T){
if(p.value<=0.05){
line(x,y,lwd=2,color=line_col)
}
else{
line(x,y,lwd=2,lty=2,color=line_col)
}
}
# adding confidence intervals around the regression line
if(confidenceInterval==T){
model<-lm(y~x)
xVals<-seq(min(x),max(x),.1)
conf<-predict(model,data.frame(x=xVals),interval="confidence",level=0.95)
lines(xVals,conf[,2],col="#00000050",lty=2,lwd=2)
lines(xVals,conf[,3],col="#00000050",lty=2,lwd=2)
}
# adding 1-d 'rug plots' to the bottom and right of the plot to show distribution of each variable
if(rug==T){
rug(x,side=1,col="#00000070",lwd=2)
rug(y,side=2,col="#00000070",lwd=2)
}
# add important stats to the plot
if(stats==T){
rp = vector('expression',3)
rp[1] = substitute(expression(r^2 == r_squared),list(r_squared = format(r_squared,dig=3)))[2]
rp[3] = substitute(expression(p == p.value), list(p.value = format(p.value, digits = 2)))[2]
rp[2] = substitute(expression(n == sample_size), list(sample_size = format(sample_size, digits = 2)))[2]
if(c>0){
legend(x="bottomright",bty="n",legend=rp, y.intersp=1.2,cex=0.9,inset = 0.01)
}
else{
legend(x="bottomleft",bty="n",legend=rp,y.intersp=0.8,inset = 0.05)
}
}
# reset the par values
on.exit(par(op))
}
scatter_hist(rnorm(30), rnorm(30),title="test", ylab= "y label", xlab="x label")
scatter(trees[,1], trees[,2])
scatter_hist(trees[,1], trees[,2])
scatter_hist(trees[,1], trees[,3])
# code adapted from from http://www.r-bloggers.com/example-10-3-enhanced-scatterplot-with-marginal-histograms/
scatter_hist<-function(x,y,xlab="",ylab="",title = "",line=T,stats=TRUE,color="black",line_col="red",confidenceInterval=T,plottingCharacter=16,rug = F,...){
op <- par(no.readonly = TRUE)
par(lwd=1,cex=1,bg="white",xpd=FALSE)
zones <- matrix(c(1,1,1,
0,5,0,
2,6,4,
0,3,0), ncol = 3, byrow = TRUE)
layout(zones, widths=c(0.3,2,1), heights = c(1,3,8,.75))
# error checking
if(length(x)!=length(y)){
stop("x and y lengths differ")
}
# get histograms
xhist <- hist(x,plot=FALSE)
yhist <- hist(y, plot=FALSE)
top <- max(c(xhist$counts, yhist$counts))
par(xaxt="n", yaxt="n",bty="n",  mar = c(.3,2,.3,0) +.05)
# main title
plot(x=1,y=1,type="n",ylim=c(-1,1), xlim=c(-1,1))
text(0,0,paste(title), cex=2)
# y label
plot(x=1,y=1,type="n",ylim=c(-1,1), xlim=c(-1,1))
text(0,0,paste(ylab), cex=1.5, srt=90)
# x label
plot(x=1,y=1,type="n",ylim=c(-1,1), xlim=c(-1,1))
text(0,0,paste(xlab), cex=1.5)
# y histogram
par(mar = c(2,0,1,1))
barplot(yhist$counts, axes = FALSE, xlim = c(0, top),space = 0, horiz = TRUE, col="grey50", border="grey50")
# x histogram
par(mar = c(0,2,1,1))
barplot(xhist$counts, axes = FALSE, ylim = c(0, top), space = 0, col="grey50", border="grey50")
# do the actual plotting
par(mar = c(2,2,.5,.5), xaxt="s", yaxt="s", bty="n")
plot(x,y,xlab=xlab,ylab=ylab,pch=plottingCharacter,yaxt='n',bty="l",col=color,cex.lab=1.2,...)
axis(2, las=2)
p.value<-summary(lm(y~x))$coefficients[2,4]
c<-summary(lm(y~x))$coefficients[2,1]
r_squared <- summary(lm(y~x))$r.squared %>% round(3)
sample_size <- length(x)
# draw the line of best fit
if(line==T){
if(p.value<=0.05){
line(x,y,lwd=2,color=line_col)
}
else{
line(x,y,lwd=2,lty=2,color=line_col)
}
}
# adding confidence intervals around the regression line
if(confidenceInterval==T){
model<-lm(y~x)
xVals<-seq(min(x),max(x),.1)
conf<-predict(model,data.frame(x=xVals),interval="confidence",level=0.95)
lines(xVals,conf[,2],col="#00000050",lty=2,lwd=2)
lines(xVals,conf[,3],col="#00000050",lty=2,lwd=2)
}
# adding 1-d 'rug plots' to the bottom and right of the plot to show distribution of each variable
if(rug==T){
rug(x,side=1,col="#00000070",lwd=2)
rug(y,side=2,col="#00000070",lwd=2)
}
# add important stats to the plot
if(stats==T){
rp = vector('expression',3)
rp[1] = substitute(expression(r^2 == r_squared),list(r_squared = format(r_squared,dig=3)))[2]
rp[3] = substitute(expression(p == p.value), list(p.value = format(p.value, digits = 2)))[2]
rp[2] = substitute(expression(n == sample_size), list(sample_size = format(sample_size, digits = 2)))[2]
if(c>0){
legend(x="bottomright",bty="n",legend=rp, y.intersp=1.2,cex=0.9,inset = 0.01)
}
else{
legend(x="bottomleft",bty="n",legend=rp,y.intersp=0.8,inset = 0.05)
}
}
# reset the par values
on.exit(par(op))
}
scatter_hist(trees[,1], trees[,3])
# code adapted from from http://www.r-bloggers.com/example-10-3-enhanced-scatterplot-with-marginal-histograms/
scatter_hist<-function(x,y,xlab="",ylab="",title = "",line=T,stats=TRUE,color="black",line_col="red",confidenceInterval=T,plottingCharacter=16,rug = F,...){
op <- par(no.readonly = TRUE)
par(lwd=1,cex=1,bg="white",xpd=FALSE)
zones <- matrix(c(1,1,1,
0,5,0,
2,6,4,
0,3,0), ncol = 3, byrow = TRUE)
layout(zones, widths=c(0.3,4,0.5), heights = c(1,3,8,.75))
# error checking
if(length(x)!=length(y)){
stop("x and y lengths differ")
}
# get histograms
xhist <- hist(x,plot=FALSE)
yhist <- hist(y, plot=FALSE)
top <- max(c(xhist$counts, yhist$counts))
par(xaxt="n", yaxt="n",bty="n",  mar = c(.3,2,.3,0) +.05)
# main title
plot(x=1,y=1,type="n",ylim=c(-1,1), xlim=c(-1,1))
text(0,0,paste(title), cex=2)
# y label
plot(x=1,y=1,type="n",ylim=c(-1,1), xlim=c(-1,1))
text(0,0,paste(ylab), cex=1.5, srt=90)
# x label
plot(x=1,y=1,type="n",ylim=c(-1,1), xlim=c(-1,1))
text(0,0,paste(xlab), cex=1.5)
# y histogram
par(mar = c(2,0,1,1))
barplot(yhist$counts, axes = FALSE, xlim = c(0, top),space = 0, horiz = TRUE, col="grey50", border="grey50")
# x histogram
par(mar = c(0,2,1,1))
barplot(xhist$counts, axes = FALSE, ylim = c(0, top), space = 0, col="grey50", border="grey50")
# do the actual plotting
par(mar = c(2,2,.5,.5), xaxt="s", yaxt="s", bty="n")
plot(x,y,xlab=xlab,ylab=ylab,pch=plottingCharacter,yaxt='n',bty="l",col=color,cex.lab=1.2,...)
axis(2, las=2)
p.value<-summary(lm(y~x))$coefficients[2,4]
c<-summary(lm(y~x))$coefficients[2,1]
r_squared <- summary(lm(y~x))$r.squared %>% round(3)
sample_size <- length(x)
# draw the line of best fit
if(line==T){
if(p.value<=0.05){
line(x,y,lwd=2,color=line_col)
}
else{
line(x,y,lwd=2,lty=2,color=line_col)
}
}
# adding confidence intervals around the regression line
if(confidenceInterval==T){
model<-lm(y~x)
xVals<-seq(min(x),max(x),.1)
conf<-predict(model,data.frame(x=xVals),interval="confidence",level=0.95)
lines(xVals,conf[,2],col="#00000050",lty=2,lwd=2)
lines(xVals,conf[,3],col="#00000050",lty=2,lwd=2)
}
# adding 1-d 'rug plots' to the bottom and right of the plot to show distribution of each variable
if(rug==T){
rug(x,side=1,col="#00000070",lwd=2)
rug(y,side=2,col="#00000070",lwd=2)
}
# add important stats to the plot
if(stats==T){
rp = vector('expression',3)
rp[1] = substitute(expression(r^2 == r_squared),list(r_squared = format(r_squared,dig=3)))[2]
rp[3] = substitute(expression(p == p.value), list(p.value = format(p.value, digits = 2)))[2]
rp[2] = substitute(expression(n == sample_size), list(sample_size = format(sample_size, digits = 2)))[2]
if(c>0){
legend(x="bottomright",bty="n",legend=rp, y.intersp=1.2,cex=0.9,inset = 0.01)
}
else{
legend(x="bottomleft",bty="n",legend=rp,y.intersp=0.8,inset = 0.05)
}
}
# reset the par values
on.exit(par(op))
}
scatter_hist(trees[,1], trees[,3])
# code adapted from from http://www.r-bloggers.com/example-10-3-enhanced-scatterplot-with-marginal-histograms/
scatter_hist<-function(x,y,xlab="",ylab="",title = "",line=T,stats=TRUE,color="black",line_col="red",confidenceInterval=T,plottingCharacter=16,rug = F,...){
op <- par(no.readonly = TRUE)
par(lwd=1,cex=1,bg="white",xpd=FALSE)
zones <- matrix(c(1,1,1,
0,5,0,
2,6,4,
0,3,0), ncol = 3, byrow = TRUE)
layout(zones, widths=c(0.3,4,0.8), heights = c(1,3,8,.75))
# error checking
if(length(x)!=length(y)){
stop("x and y lengths differ")
}
# get histograms
xhist <- hist(x,plot=FALSE)
yhist <- hist(y, plot=FALSE)
top <- max(c(xhist$counts, yhist$counts))
par(xaxt="n", yaxt="n",bty="n",  mar = c(.3,2,.3,0) +.05)
# main title
plot(x=1,y=1,type="n",ylim=c(-1,1), xlim=c(-1,1))
text(0,0,paste(title), cex=2)
# y label
plot(x=1,y=1,type="n",ylim=c(-1,1), xlim=c(-1,1))
text(0,0,paste(ylab), cex=1.5, srt=90)
# x label
plot(x=1,y=1,type="n",ylim=c(-1,1), xlim=c(-1,1))
text(0,0,paste(xlab), cex=1.5)
# y histogram
par(mar = c(2,0,1,1))
barplot(yhist$counts, axes = FALSE, xlim = c(0, top),space = 0, horiz = TRUE, col="grey50", border="grey50")
# x histogram
par(mar = c(0,2,1,1))
barplot(xhist$counts, axes = FALSE, ylim = c(0, top), space = 0, col="grey50", border="grey50")
# do the actual plotting
par(mar = c(2,2,.5,.5), xaxt="s", yaxt="s", bty="n")
plot(x,y,xlab=xlab,ylab=ylab,pch=plottingCharacter,yaxt='n',bty="l",col=color,cex.lab=1.2,...)
axis(2, las=2)
p.value<-summary(lm(y~x))$coefficients[2,4]
c<-summary(lm(y~x))$coefficients[2,1]
r_squared <- summary(lm(y~x))$r.squared %>% round(3)
sample_size <- length(x)
# draw the line of best fit
if(line==T){
if(p.value<=0.05){
line(x,y,lwd=2,color=line_col)
}
else{
line(x,y,lwd=2,lty=2,color=line_col)
}
}
# adding confidence intervals around the regression line
if(confidenceInterval==T){
model<-lm(y~x)
xVals<-seq(min(x),max(x),.1)
conf<-predict(model,data.frame(x=xVals),interval="confidence",level=0.95)
lines(xVals,conf[,2],col="#00000050",lty=2,lwd=2)
lines(xVals,conf[,3],col="#00000050",lty=2,lwd=2)
}
# adding 1-d 'rug plots' to the bottom and right of the plot to show distribution of each variable
if(rug==T){
rug(x,side=1,col="#00000070",lwd=2)
rug(y,side=2,col="#00000070",lwd=2)
}
# add important stats to the plot
if(stats==T){
rp = vector('expression',3)
rp[1] = substitute(expression(r^2 == r_squared),list(r_squared = format(r_squared,dig=3)))[2]
rp[3] = substitute(expression(p == p.value), list(p.value = format(p.value, digits = 2)))[2]
rp[2] = substitute(expression(n == sample_size), list(sample_size = format(sample_size, digits = 2)))[2]
if(c>0){
legend(x="bottomright",bty="n",legend=rp, y.intersp=1.2,cex=0.9,inset = 0.01)
}
else{
legend(x="bottomleft",bty="n",legend=rp,y.intersp=0.8,inset = 0.05)
}
}
# reset the par values
on.exit(par(op))
}
scatter_hist(trees[,1], trees[,3])
scatter_hist(trees[,1], trees[,3], main="trees")
scatter_hist(trees[,1], trees[,3], title="trees")
# code adapted from from http://www.r-bloggers.com/example-10-3-enhanced-scatterplot-with-marginal-histograms/
scatter_hist<-function(x,y,xlab="",ylab="",title = "",line=T,stats=TRUE,color="black",line_col="red",confidenceInterval=T,plottingCharacter=16,rug = F,...){
op <- par(no.readonly = TRUE)
par(lwd=1,cex=1,bg="white",xpd=FALSE)
zones <- matrix(c(1,1,1,
0,5,0,
2,6,4,
0,3,0), ncol = 3, byrow = TRUE)
layout(zones, widths=c(0.3,4,0.8), heights = c(1,2.3,8,.75))
# error checking
if(length(x)!=length(y)){
stop("x and y lengths differ")
}
# get histograms
xhist <- hist(x,plot=FALSE)
yhist <- hist(y, plot=FALSE)
top <- max(c(xhist$counts, yhist$counts))
par(xaxt="n", yaxt="n",bty="n",  mar = c(.3,2,.3,0) +.05)
# main title
plot(x=1,y=1,type="n",ylim=c(-1,1), xlim=c(-1,1))
text(0,0,paste(title), cex=2)
# y label
plot(x=1,y=1,type="n",ylim=c(-1,1), xlim=c(-1,1))
text(0,0,paste(ylab), cex=1.5, srt=90)
# x label
plot(x=1,y=1,type="n",ylim=c(-1,1), xlim=c(-1,1))
text(0,0,paste(xlab), cex=1.5)
# y histogram
par(mar = c(2,0,1,1))
barplot(yhist$counts, axes = FALSE, xlim = c(0, top),space = 0, horiz = TRUE, col="grey50", border="grey50")
# x histogram
par(mar = c(0,2,1,1))
barplot(xhist$counts, axes = FALSE, ylim = c(0, top), space = 0, col="grey50", border="grey50")
# do the actual plotting
par(mar = c(2,2,.5,.5), xaxt="s", yaxt="s", bty="n")
plot(x,y,xlab=xlab,ylab=ylab,pch=plottingCharacter,yaxt='n',bty="l",col=color,cex.lab=1.2,...)
axis(2, las=2)
p.value<-summary(lm(y~x))$coefficients[2,4]
c<-summary(lm(y~x))$coefficients[2,1]
r_squared <- summary(lm(y~x))$r.squared %>% round(3)
sample_size <- length(x)
# draw the line of best fit
if(line==T){
if(p.value<=0.05){
line(x,y,lwd=2,color=line_col)
}
else{
line(x,y,lwd=2,lty=2,color=line_col)
}
}
# adding confidence intervals around the regression line
if(confidenceInterval==T){
model<-lm(y~x)
xVals<-seq(min(x),max(x),.1)
conf<-predict(model,data.frame(x=xVals),interval="confidence",level=0.95)
lines(xVals,conf[,2],col="#00000050",lty=2,lwd=2)
lines(xVals,conf[,3],col="#00000050",lty=2,lwd=2)
}
# adding 1-d 'rug plots' to the bottom and right of the plot to show distribution of each variable
if(rug==T){
rug(x,side=1,col="#00000070",lwd=2)
rug(y,side=2,col="#00000070",lwd=2)
}
# add important stats to the plot
if(stats==T){
rp = vector('expression',3)
rp[1] = substitute(expression(r^2 == r_squared),list(r_squared = format(r_squared,dig=3)))[2]
rp[3] = substitute(expression(p == p.value), list(p.value = format(p.value, digits = 2)))[2]
rp[2] = substitute(expression(n == sample_size), list(sample_size = format(sample_size, digits = 2)))[2]
if(c>0){
legend(x="bottomright",bty="n",legend=rp, y.intersp=1.2,cex=0.9,inset = 0.01)
}
else{
legend(x="bottomleft",bty="n",legend=rp,y.intersp=0.8,inset = 0.05)
}
}
# reset the par values
on.exit(par(op))
}
scatter_hist(trees[,1], trees[,3], title="trees")
scatter_hist(trees[,2], trees[,3], title="trees")
scatter_hist(trees[,2], trees[,1], title="trees")
?barplot
?hist
# code adapted from from http://www.r-bloggers.com/example-10-3-enhanced-scatterplot-with-marginal-histograms/
scatter_hist<-function(x,y,xlab="",ylab="",title = "",line=T,stats=TRUE,color="black",line_col="red",confidenceInterval=T,plottingCharacter=16,rug = F,...){
op <- par(no.readonly = TRUE)
par(lwd=1,cex=1,bg="white",xpd=FALSE)
zones <- matrix(c(1,1,1,
0,5,0,
2,6,4,
0,3,0), ncol = 3, byrow = TRUE)
layout(zones, widths=c(0.3,4,0.8), heights = c(1,2.3,8,.75))
# error checking
if(length(x)!=length(y)){
stop("x and y lengths differ")
}
# get histograms
xhist <- hist(x,plot=FALSE,breaks=10)
yhist <- hist(y, plot=FALSE, breaks=10)
top <- max(c(xhist$counts, yhist$counts))
par(xaxt="n", yaxt="n",bty="n",  mar = c(.3,2,.3,0) +.05)
# main title
plot(x=1,y=1,type="n",ylim=c(-1,1), xlim=c(-1,1))
text(0,0,paste(title), cex=2)
# y label
plot(x=1,y=1,type="n",ylim=c(-1,1), xlim=c(-1,1))
text(0,0,paste(ylab), cex=1.5, srt=90)
# x label
plot(x=1,y=1,type="n",ylim=c(-1,1), xlim=c(-1,1))
text(0,0,paste(xlab), cex=1.5)
# y histogram
par(mar = c(2,0,1,1))
barplot(yhist$counts, axes = FALSE, xlim = c(0, top),space = 0, horiz = TRUE, col="grey50", border="grey50")
# x histogram
par(mar = c(0,2,1,1))
barplot(xhist$counts, axes = FALSE, ylim = c(0, top), space = 0, col="grey50", border="grey50")
# do the actual plotting
par(mar = c(2,2,.5,.5), xaxt="s", yaxt="s", bty="n")
plot(x,y,xlab=xlab,ylab=ylab,pch=plottingCharacter,yaxt='n',bty="l",col=color,cex.lab=1.2,...)
axis(2, las=2)
p.value<-summary(lm(y~x))$coefficients[2,4]
c<-summary(lm(y~x))$coefficients[2,1]
r_squared <- summary(lm(y~x))$r.squared %>% round(3)
sample_size <- length(x)
# draw the line of best fit
if(line==T){
if(p.value<=0.05){
line(x,y,lwd=2,color=line_col)
}
else{
line(x,y,lwd=2,lty=2,color=line_col)
}
}
# adding confidence intervals around the regression line
if(confidenceInterval==T){
model<-lm(y~x)
xVals<-seq(min(x),max(x),.1)
conf<-predict(model,data.frame(x=xVals),interval="confidence",level=0.95)
lines(xVals,conf[,2],col="#00000050",lty=2,lwd=2)
lines(xVals,conf[,3],col="#00000050",lty=2,lwd=2)
}
# adding 1-d 'rug plots' to the bottom and right of the plot to show distribution of each variable
if(rug==T){
rug(x,side=1,col="#00000070",lwd=2)
rug(y,side=2,col="#00000070",lwd=2)
}
# add important stats to the plot
if(stats==T){
rp = vector('expression',3)
rp[1] = substitute(expression(r^2 == r_squared),list(r_squared = format(r_squared,dig=3)))[2]
rp[3] = substitute(expression(p == p.value), list(p.value = format(p.value, digits = 2)))[2]
rp[2] = substitute(expression(n == sample_size), list(sample_size = format(sample_size, digits = 2)))[2]
if(c>0){
legend(x="bottomright",bty="n",legend=rp, y.intersp=1.2,cex=0.9,inset = 0.01)
}
else{
legend(x="bottomleft",bty="n",legend=rp,y.intersp=0.8,inset = 0.05)
}
}
# reset the par values
on.exit(par(op))
}
scatter_hist(trees[,2], trees[,1], title="trees")
scatter_hist(trees[,1], trees[,3], title="trees")
require(redingPlot)
?cats_meow
data(iris); cats_meow(iris$Sepal.Length,iris$Species, ylab="sepal length", xlab = "species")
?boxplot
boxplot(list(nrorm(40), rnorm(50)), bty='l')
boxplot(list(rnorm(40), rnorm(50)), bty='l')
setwd("~/Documents/redingp")
setwd("~/Documents/redingPlot/")
library(devtools)
require(roxygen2)
document()
